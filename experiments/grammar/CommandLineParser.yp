#!perl
%{
    use warnings;

    use PDBxParser qw( filter );
%}

%%

exp
    : 'resid' NUM { $_[2] }
    | 'resname' STR { $_[0]->{'resname'} = $_[2] }
;

%%

sub lexer
{
    my( $parser ) = shift;

    $parser->YYData->{INPUT} || return( '',undef );
    $parser->YYData->{INPUT} =~ s/^[ \t]//;

    # Returns tokens to parser.
    for( $parser->YYData->{INPUT} ){
        if( s/^(resid)// ) {
            return ( 'resid', $1 );
        } elsif( s/^(resname)// ) {
            return ( 'resname', $1 );
        } elsif( s/^([0-9]+)// ) {
            return ( 'NUM', $1 );
	} elsif( s/^(\w+)// ) {
            return ( 'STR', $1 );
	}
    }
}

sub debugger
{
    exists $_[0]->YYData->{ERRMSG}

    and do {
        print $_[0]->YYData->{ERRMSG};
        return;
    };

    print "Syntax error\n";
}

sub parser
{
    my ( $self, $input ) = @_;

    $self->YYData->{INPUT} = $input;
    my $result = $self->YYParse( yylex => \&lexer,
                                 yyerror => \&debugger,
				 yydebug=>0x00 );

    return $result;
}
