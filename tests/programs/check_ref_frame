#!/usr/bin/perl

use strict;
use warnings;

use lib "../../lib/perl";
use LinearAlgebra qw( create_ref_frame
                      find_euler_angles
                      matrix_product
                      translation
                      x_axis_rotation
                      z_axis_rotation );

use lib "../lib";
use Utils qw( select_atom_data );

#
# Unit test: LinearAlgebra::create_ref_frame
#            LinearAlgebra::find_euler_angles.
#
# Bring molecule's local frame of reference to global.
#
# Example: ./check_ref_frame "label_atom_id CA,N,CB,OG" \
#                            "Cartn_x,Cartn_y,Cartn_z" example.cif
#

my ( $atom_specifier, $data_specifier, $pdbx_file ) = @ARGV;

# Selects atom's data for further analysis.
my $atom_data = select_atom_data( $pdbx_file,
				  $atom_specifier,
				  $data_specifier );

# Finds Euler angles and makes rotational matrices.
my @mid_atom_coord =  ( $atom_data->[1][0],
		        $atom_data->[1][1],
			$atom_data->[1][2] );
my @up_atom_coord =   ( $atom_data->[2][0],
			$atom_data->[2][1],
			$atom_data->[2][2] );
my @side_atom_coord = ( $atom_data->[0][0],
			$atom_data->[0][1],
			$atom_data->[0][2] );

my $local_ref_frame = create_ref_frame( @mid_atom_coord,
					@up_atom_coord,
					@side_atom_coord );

my ( $alpha, $beta, $gamma ) = @{ find_euler_angles( @mid_atom_coord,
						     @up_atom_coord,
						     @side_atom_coord ) };

# Transforms given atom coordinates and prepares data for Jmol.
open( my $fh, "<", $pdbx_file );
chomp( my @pdbx_lines = <$fh> );
close( $fh );

print( "data \"model\"\n" );
print( scalar( grep { /ATOM/ } @pdbx_lines ) + 3, "\n" );
print( "testing\n" );

for my $pdbx_line ( grep( /^ATOM/, @pdbx_lines ) ){
    my @atom_data = split( " ", $pdbx_line );
    my $atom_name = $atom_data[2];
    my @atom_coord = ( [ $atom_data[10] ],
		       [ $atom_data[11] ],
		       [ $atom_data[12] ],
		       [ 1 ] );
    my @tranf_atom_coord =
    	matrix_product(
    	    z_axis_rotation( $alpha ),
    	    x_axis_rotation( $beta ),
    	    z_axis_rotation( $gamma ),
    	    translation( ( - $mid_atom_coord[0],
    	    		   - $mid_atom_coord[1],
    	    		   - $mid_atom_coord[2] ) ),
    	    \@atom_coord );
    printf( "%s %.3f %.3f %.3f\n",
	    $atom_name,
	    $tranf_atom_coord[0][0][0],
	    $tranf_atom_coord[0][1][0],
	    $tranf_atom_coord[0][2][0] );
}

# Draws atoms on the end of axes.
print( "X 2 0 0\nX 0 2 0\nX 0 0 2\n" );

print( "end \"model\"\n" );

# Draws global axes.
print( "draw global_x_axis vector "
       . "{0 0 0} "
       . "{2 0 0}\n" );
print( "draw global_y_axis vector "
       . "{0 0 0} "
       . "{0 2 0}\n" );
print( "draw global_z_axis vector "
       . "{0 0 0} "
       . "{0 0 2}\n" );

# Colors axes.
print( "color \$global_x_axis red\n" );
print( "color \$global_y_axis green\n" );
print( "color \$global_z_axis blue\n" );
