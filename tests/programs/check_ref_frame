#!/usr/bin/perl

use strict;
use warnings;

use lib "../../lib/perl";
use LinearAlgebra qw( create_ref_frame
                      find_euler_angles
                      z_axis_rotation
                      x_axis_rotation 
                      translation );

use lib "../lib";
use Utils qw( select_atom_data );

#
# Unit test: LinearAlgebra::create_ref_frame
#            LinearAlgebra::find_euler_angles.
#
# Bring molecule's local frame of reference to global.
#
# Example: ./check_ref_frame "label_atom_id CA,N,CB,OG" \
#                            "Cartn_x,Cartn_y,Cartn_z" < example.cif
#

my $attribute_filter = shift;
my $attribute_select = shift;
my @cif = <>;

# Selects atom's data for further analysis.
my $selected_atom_data = select_atom_data( $attribute_filter,
					   $attribute_select,
					   @cif );

# Finds Euler angles and makes rotational matrices.
my @mid_atom_coord =  ( $selected_atom_data->[1][0],
		        $selected_atom_data->[1][1],
			$selected_atom_data->[1][2] );
my @up_atom_coord =   ( $selected_atom_data->[2][0],
			$selected_atom_data->[2][1],
			$selected_atom_data->[2][2] );
my @side_atom_coord = ( $selected_atom_data->[0][0],
			$selected_atom_data->[0][1],
			$selected_atom_data->[0][2] );

my @local_ref_frame = create_ref_frame( @mid_atom_coord,
					@up_atom_coord,
					@side_atom_coord );

my ( $alpha, $beta, $gamma ) = find_euler_angles( @mid_atom_coord,
						  @up_atom_coord,
						  @side_atom_coord );

# Transforms given atom coordinates and prepares data for Jmol.
print( "data \"model\"\n" );
print( scalar( grep { /ATOM/ } @cif ), "\n" );
print( "testing\n" );

for my $cif_line ( grep( /^ATOM/, @cif ) ){
    my @cif_data = split( " ", $cif_line );
    my $atom_name = $cif_data[2];
    my @atom_coord = ( [ $cif_data[10] ],
		       [ $cif_data[11] ],
		       [ $cif_data[12] ],
		       [ 1 ] );
    my @tranf_atom_coord =
	matrix_product( 
	    z_axis_rotation( $alpha ),
	    x_axis_rotation( $beta ),
	    z_axis_rotation( $gamma ),
	    translation( ( - $mid_atom_coord[0],
			   - $mid_atom_coord[1],
			   - $mid_atom_coord[2] ) ),
	    \@atom_coord );
    print( "$atom_name "
    	   . "$tranf_atom_coord[0][0][0] "
    	   . "$tranf_atom_coord[0][1][0] "
    	   . "$tranf_atom_coord[0][2][0]\n" );
}

print( "end \"model\"\n" );

# Draws global axes.
print( "draw global_x_axis vector "
       . "{0 0 0} "
       . "{2 0 0}\n" );
print( "draw global_y_axis vector "
       . "{0 0 0} "
       . "{0 2 0}\n" );
print( "draw global_z_axis vector "
       . "{0 0 0} "
       . "{0 0 2}\n" );

# Colors axes.
print( "color \$global_x_axis red\n" );
print( "color \$global_y_axis green\n" );
print( "color \$global_z_axis blue\n" );
