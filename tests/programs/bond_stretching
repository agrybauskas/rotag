#!/usr/bin/perl

use strict;
use warnings;

use lib "../../lib/perl";
use AlterMolecule qw( bond_stretching );
use LinearAlgebra qw( vectorize evaluate_matrix matrix_product );

use lib "../lib";
use Utils qw( select_atom_data );
use Data::Dumper;
#
# Unit test: AlterMolecule::bond_stretching.
#
# In Jmol, generates pseudo-atoms which represent positions of atom
# after the resize of the bond.
#
# Example: ./change_bond_length "label_atom_id CA,N,CB,OG" \
#                               "Cartn_x,Cartn_y,Cartn_z" \
#                               2.0 10 < example.cif
#

my $attribute_filter = shift;
my $attribute_select = shift;
my $bond_min_max = shift; # Amount of which bond will change.
my $num_of_points = shift;
my @cif = <>;

# Selects atom's data for further analysis.
my $selected_atom_data = select_atom_data( $attribute_filter,
					   $attribute_select,
					   @cif );

# Prints out count of atoms and arbitrary word that are neccessary for Jmol.
print( scalar( grep { /ATOM/ } @cif ) + $num_of_points - 2, "\n" );
print( "testing\n" );

# Prepares selected atom data for Jmol.
map { print( $_->[2], "\t", $_->[10], "\t", $_->[11], "\t", $_->[12], "\n" ) }
map { [ split( " ", $_ ) ] }
grep { $_ =~ /ATOM/ }
@cif;

# Changes bond by certain distance.
my $transl_atom_coord =
    matrix_product(
	&bond_stretching( "r",
			  $selected_atom_data->[1],
			  $selected_atom_data->[2],
			  $selected_atom_data->[0] ),
	&vectorize( $selected_atom_data->[3] ) );

# Smallest change in bond length by given num_of_points and bond_min_max.
my $smallest_length = $bond_min_max / $num_of_points;

# Calculates the distance of the bond that will be translated along.
my $r;

my @delta_lengths =
    map { $_ * $smallest_length, - ( $_ * $smallest_length ) }
        ( 1..( $num_of_points - 1 ) / 2 );

# Evaluates symbolic expression.
my $eval_expression;

# Translates along the bond and creates Jmol readable structure file.
my %symbols;
my $evaluated_matrix;

for my $delta ( @delta_lengths ) {
    $symbols{"r"} = "$delta";
    $evaluated_matrix =
	evaluate_matrix( \%symbols,
			 &matrix_product( $transl_atom_coord ) );

    for my $row ( $evaluated_matrix ) {
	print( "X\t" );
	for my $item ( @$row[0..2] ) {
	    printf( "%.3f\t", @$item );
	}
	print( "\n" );
    }
}
