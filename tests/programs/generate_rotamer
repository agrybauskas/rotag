#!/usr/bin/perl

use strict;
use warnings;

use lib "../../lib/perl";
use LinearAlgebra qw( pi );
use PDBxParser qw( obtain_atom_site );
use PseudoAtoms qw( generate_rotamer );
use SidechainModels qw( rotation_only );

use lib "../lib";
use Utils qw( select_atom_data );
use Data::Dumper;
my ( $resi_specifier, $angle_values, $pdbx_file ) = @ARGV;

# Selects atom's data for further analysis.
my $atom_site = obtain_atom_site( $pdbx_file );

# Parses angles for pseudo-rotamers.
my %angle_values = ( map { $_->[0] => $_->[1] }
		     map { [ split( " ", $_ ) ] }
		     split( "&", $angle_values ) );

# Calculates angles that will be rotated along.
my $pi = pi();

# In Jmol, generates pseudo-atoms which represent positions of atom
# after rotation along dihedral angle.
open( my $fh, "<", $pdbx_file );
chomp( my @pdbx_lines = <$fh> );
close( $fh );

# Creates pseudo-atoms for given analytical equation that describes conformation
# of atom.
my $pseudo_rotamer =
    generate_rotamer( $atom_site, { $resi_specifier => \%angle_values } );

# Prints out count of atoms and arbitrary word that are neccessary for Jmol.
print( scalar( keys %{ $pseudo_rotamer } ), "\n" );
print( "testing\n" );

# Prints out pseudo-atom coordinates.
for my $atom_id ( sort { $a <=> $b } keys %{ $pseudo_rotamer } ) {
    printf( "$pseudo_rotamer->{$atom_id}{\"type_symbol\"}" .
	    "\t%.3f\t%.3f\t%.3f\n",
	    $pseudo_rotamer->{$atom_id}{"Cartn_x"},
	    $pseudo_rotamer->{$atom_id}{"Cartn_y"},
	    $pseudo_rotamer->{$atom_id}{"Cartn_z"} );
}
