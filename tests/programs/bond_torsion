#!/usr/bin/perl

use strict;
use warnings;

use lib "../../lib/perl";
use AlterMolecule qw( bond_torsion );
use LinearAlgebra qw( evaluate_matrix matrix_product pi vectorize);

use lib "../lib";
use Utils qw( select_atom_data );

#
# Unit test: AlterMolecule::bond_torsion.
#
# In Jmol, generates pseudo-atoms which represent positions of atom
# after rotation along dihedral angle.
#
# Example: ./rotate_bond "label_atom_id CA,N,CB,OG" "Cartn_x,Cartn_y,Cartn_z"
#                        27 example.cif
#

my ( $atom_specifier, $data_specifier, $number_of_atoms, $pdbx_file ) = @ARGV;

# Selects atom's data for further analysis.
my $atom_coord = select_atom_data( $pdbx_file,
				   $atom_specifier,
				   $data_specifier );

# Prints out count of atoms and arbitrary word that are neccessary for Jmol.
open( my $fh, "<", $pdbx_file );
chomp( my @pdbx_lines = <$fh> );
close( $fh );

print( scalar( grep { /ATOM/ } @pdbx_lines ) + $number_of_atoms - 1, "\n" );
print( "testing\n" );

# Prepares selected atom data for Jmol.
map { print( $_->[2], "\t", $_->[10], "\t", $_->[11], "\t", $_->[12], "\n" ) }
map { [ split( " ", $_ ) ] }
grep { $_ =~ /ATOM/ }
@pdbx_lines;

# Creates transformation matrix that describes rotation along one chi angle.
my $transf_matrix =
    matrix_product( bond_torsion( $atom_coord->[1],
				  $atom_coord->[2],
				  $atom_coord->[0],
				  "chi"),
		    vectorize( $atom_coord->[3] ) );

# Calculates angles that will be rotated along the bond.
my $small_angle = 2 / $number_of_atoms;
my @angles = map { $_ * $small_angle * pi() } ( 1..$number_of_atoms-1 );

# Rotates along the bond by chi angle numerically and creates Jmol readable file.
my %symbols;
my $eval_matrix;

for my $chi ( @angles ) {
    $symbols{"chi"} = $chi;
    $eval_matrix =
    	evaluate_matrix( matrix_product( $transf_matrix ),
    			 \%symbols );
    printf( "X\t%.3f\t%.3f\t%.3f\n",
    	    $eval_matrix->[0][0],
	    $eval_matrix->[1][0],
	    $eval_matrix->[2][0] );
}
