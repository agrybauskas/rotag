#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
use File::Basename;
use List::Util qw( any );

use Logging qw( error
                warning );
use PDBxParser qw( obtain_pdbx_data
                   raw2indexed
                   split_by );

Getopt::Long::Configure qw( gnu_getopt );

#*remove_duplicate_angles [options] -a <angle1,angle2...> <cif-file>...
#
#*Options:
#*    -a, --angles
#*                        filter only these angles.
#*    -m, --mean
#*                        return the average count of angle combinations.

# --------------------------------- Options ----------------------------------- #

my $angles;
my $return_mean = 0;

local $SIG{__WARN__} = sub {
    warning( { 'program' => $0,
               'message' => @_,
               'filename' => join( ', ', @ARGV ) } );
};

local $SIG{__DIE__} = sub {
    error( { 'program' => $0,
             'message' => @_,
             'filename' => join( ', ', @ARGV ) } );
};

GetOptions(
    'angles|a=s' => \$angles,
    'mean|m' => sub { $return_mean = 1 },
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {
                                $help_message =~ s/^\*$/ /smgx;
                                $help_message =~ s/^\*//smgx;
                                print $help_message, "\n";
                            }
                        }
                        close $fh;
                        exit;
                    },
) or error( { 'program' => $0,
              'message' => "mistake in command line argument.\n" } );

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

$angles =~ s/ //g;
my @angles = split /,/, $angles;

my %rotamer_count = ();
for my $cif_file ( @ARGV ) {
    my %rotamer_angles;

    my $rotamer_angle = obtain_pdbx_data( $cif_file, ['_[local]_rotamer_angle']);
    raw2indexed( $rotamer_angle,
                 { 'attributes' =>
                       { '_[local]_rotamer_angle' => [ 'id' ] } } );

    my $rotamer_angle_groups =
        split_by( { 'atom_site' =>
                        $rotamer_angle->{'_[local]_rotamer_angle'}{'data'},
                    'attributes' => [ 'rotamer_id' ] } );

    for my $rotamer_id ( sort keys %{ $rotamer_angle_groups } ) {
        my @rotamer_angles = ();
        for my $angle_id ( @{ $rotamer_angle_groups->{$rotamer_id} } ) {
            my $angle_data =
                $rotamer_angle->{'_[local]_rotamer_angle'}{'data'}{$angle_id};

            next if ! any { $angle_data->{'type'} eq $_ } @angles;

            push @rotamer_angles, $angle_data;
        }
        my $key = join ",", map { $_->{'label_seq_id'},
                                  $_->{'label_asym_id'},
                                  $_->{'pdbx_PDB_model_num'},
                                  $_->{'label_alt_id'},
                                  $_->{'type'},
                                  $_->{'value'} } @rotamer_angles;
        if( ! exists $rotamer_angles{$key} ) {
            $rotamer_angles{$key} = \@rotamer_angles;
        }
    }
    # HACK: fix if the rotamer count per file is greater than 1.
    if( ! $return_mean ) {
        print basename( $cif_file ), "\t", scalar keys %rotamer_angles, "\n";
    } else {
        $rotamer_count{basename($cif_file)} = scalar keys %rotamer_angles;
    }
}

if( $return_mean ) {
    my $sum = 0;
    my $count = 0;
    for my $cif_file ( sort keys %rotamer_count ) {
        next if ! $rotamer_count{$cif_file} > 0;

        $sum += $rotamer_count{$cif_file};
        $count++;
    }
    print $sum / $count;
}
