#!/usr/bin/perl

use strict;
use warnings;

use Grid qw( create_box );
use ForceField::Parameters;
use PDBxParser qw( filter
                   obtain_atom_site );

#
# Unit test: Grid::create_box.
#
# Creates smallest possible box that surrounds all selected atoms.
#
# Example: ./create_box example.cif
#

my ( $pdbx_file ) = @ARGV;

my $parameters = Parameters->new();

my $SIG_FIGS = $parameters->{'_[local]_constants'}{'sig_figs_min'};

my $atom_site = obtain_atom_site( $pdbx_file );

# In Jmol, prints out atom coordinates.
print( "data \"model\"\n" );
print( scalar( keys %{ $atom_site } ), "\n" );
print( "testing\n" );

for my $atom_id ( sort { $a <=> $b } keys %{ $atom_site } ) {
    printf( "$atom_site->{$atom_id}{\"type_symbol\"}" .
            "\t$SIG_FIGS\t$SIG_FIGS\t$SIG_FIGS\n",
            $atom_site->{$atom_id}{"Cartn_x"},
            $atom_site->{$atom_id}{"Cartn_y"},
            $atom_site->{$atom_id}{"Cartn_z"} );
}

print( "end \"model\"\n" );

my $boundary_box = create_box(
    filter( { 'atom_site' => $atom_site,
              'data' => [ 'Cartn_x', 'Cartn_y', 'Cartn_z' ] } )
);

print( "draw line1",
       "{$boundary_box->[1], $boundary_box->[2], $boundary_box->[5]}",
       "{$boundary_box->[1], $boundary_box->[2], $boundary_box->[4]};",
       "draw line2",
       "{$boundary_box->[1], $boundary_box->[2], $boundary_box->[5]}",
       "{$boundary_box->[1], $boundary_box->[3], $boundary_box->[5]};",
       "draw line3",
       "{$boundary_box->[1], $boundary_box->[2], $boundary_box->[5]}",
       "{$boundary_box->[0], $boundary_box->[2], $boundary_box->[5]};",
       "draw line4",
       "{$boundary_box->[0], $boundary_box->[3], $boundary_box->[5]}",
       "{$boundary_box->[0], $boundary_box->[3], $boundary_box->[4]};",
       "draw line5",
       "{$boundary_box->[0], $boundary_box->[3], $boundary_box->[5]}",
       "{$boundary_box->[0], $boundary_box->[2], $boundary_box->[5]};",
       "draw line6",
       "{$boundary_box->[0], $boundary_box->[3], $boundary_box->[5]}",
       "{$boundary_box->[1], $boundary_box->[3], $boundary_box->[5]};",
       "draw line7",
       "{$boundary_box->[0], $boundary_box->[2], $boundary_box->[4]}",
       "{$boundary_box->[0], $boundary_box->[2], $boundary_box->[5]};",
       "draw line8",
       "{$boundary_box->[0], $boundary_box->[2], $boundary_box->[4]}",
       "{$boundary_box->[0], $boundary_box->[3], $boundary_box->[4]};",
       "draw line9",
       "{$boundary_box->[0], $boundary_box->[2], $boundary_box->[4]}",
       "{$boundary_box->[1], $boundary_box->[2], $boundary_box->[4]};",
       "draw line10",
       "{$boundary_box->[1], $boundary_box->[3], $boundary_box->[4]}",
       "{$boundary_box->[1], $boundary_box->[3], $boundary_box->[5]};",
       "draw line11",
       "{$boundary_box->[1], $boundary_box->[3], $boundary_box->[4]}",
       "{$boundary_box->[1], $boundary_box->[2], $boundary_box->[4]};",
       "draw line12",
       "{$boundary_box->[1], $boundary_box->[3], $boundary_box->[4]}",
       "{$boundary_box->[0], $boundary_box->[3], $boundary_box->[4]};" );
