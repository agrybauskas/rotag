#!/usr/bin/perl

use strict;
use warnings;

use ForceField::Parameters;
use ForceField::NonBonded qw( hard_sphere );
use PDBxParser qw( filter
                   to_pdbx );
use PseudoAtoms qw( calc_full_atom_energy );

my ( $residue_id,
     $residue_chain,
     $pdbx_model,
     $residue_alt,
     $potential,
     $interaction_specifier,
     $checkable_angles,
     $pdbx_dump_file ) = @ARGV;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

my $PARAMETERS = Parameters->new();
my $PI = $PARAMETERS->{'_[local]_constants'}{'pi'};
my $SIG_FIGS_MIN = $PARAMETERS->{'_[local]_constants'}{'sig_figs_min'};

my @checkable_angles;
for my $angles ( split /;/, $checkable_angles ) {
    my @current_angles;
    for my $angle ( split /,/, $angles ) {
        $angle =~ s/pi/\$PI/g;
        push @current_angles, eval( $angle );
    }
    push @checkable_angles, \@current_angles;
}

my %interaction_specifier = ( map { $_->[0] => [ split( ",", @$_[1] ) ] }
                              map { [ split( " ", $_ ) ] }
                              split( "&", $interaction_specifier ) );
my $interaction_site = filter( { 'atom_site' => $atom_site,
                                 'include' => \%interaction_specifier } );

# my ( $favourable_angles, $favourable_energies ) =
#     @{
        calc_full_atom_energy( { 'atom_site' => $atom_site,
                                'residue_unique_key' =>
                                    "${residue_id},${residue_chain},".
                                    "${pdbx_model},${residue_alt}",
                                'interaction_site' => $interaction_site,
                                'non_bonded_potential' => \&hard_sphere,
                                'is_hydrogen_explicit' => 0,
                                'PARAMETERS' => $PARAMETERS,
                              },
                              [ @checkable_angles ],
                              'threads' => 1 ) # }
;

# my $angle_id = 1;
# for my $i ( $#{ $favourable_angles } ) {
#     my @angle_names = map { "chi${_}" } 1..$#{ $favourable_angles->[$i] }+1;
#     for my $j ( 0..$#{ $favourable_angles->[$i] } ) {
#         print $angle_id, ', ', $angle_names[$j], ', ',
#             sprintf( $SIG_FIGS_MIN, 180 * $favourable_angles->[$i][$j] / $PI ), ', ',
#             sprintf( $SIG_FIGS_MIN, $favourable_energies->[$i] ), "\n";
#     }
#     $angle_id++;
# }
