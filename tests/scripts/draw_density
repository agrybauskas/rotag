#!/usr/bin/perl

use strict;
use warnings;

use lib "../../lib";
use LinearAlgebra qw( pi );
use PDBxParser qw( obtain_atom_site
                   filter_atoms
                   select_atom_data
                   to_pdbx );
use PseudoAtoms qw( generate_library );
use SidechainModels qw( rotation_only );

my ( $potential, $cutoff, $residue_id, $small_angle, $pdbx_file ) = @ARGV;

my $atom_site = obtain_atom_site( $pdbx_file );
$small_angle =~ s/pi/pi\(\)/g;

# In Jmol, generates pseudo-atoms which represent positions of atom
# after rotation along dihedral angle.
open( my $fh, "<", $pdbx_file );
chomp( my @pdbx_lines = <$fh> );
close( $fh );

# Creates pseudo-atoms for given analytical equation that describes conformation
# of atom.
%{ $atom_site } =
    ( %{ $atom_site },
      %{ generate_library( { "atom_site"     => $atom_site,
                             "residue_ids"   => [ $residue_id ],
                             "small_angle"   => eval( $small_angle ),
                             "conformations" => \&rotation_only,
                             "interactions"  => $potential,
                             "cutoff"        => $cutoff  } ) } );

# Loads PDBx as Jmol script.
print( "data \"model\"\n" );
to_pdbx( { "atom_site" => $atom_site } );
print( "end \"model\"\n" );

# Selects non-pseudo-atoms and disconnects all non-selected atoms, changes their
# VdW size.
my @atom_ids;

for my $atom_id ( keys %{ $atom_site } ) {
    if( ! exists $atom_site->{$atom_id}{"is_pseudo_atom"} ) {
        push( @atom_ids, $atom_id );
    }
}

print( "select atomno=", join( ", atomno=", ( 1..scalar( @atom_ids ) ) ), ";\n",
       "select (not selected);\n",
       "connect (selected) (not selected) DELETE;\n",
       "connect (selected) (selected) DELETE;\n",
       "spacefill 0.05;\n" );
