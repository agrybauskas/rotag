#!/usr/bin/perl

use strict;
use warnings;

use LinearAlgebra qw( pi );
use PseudoAtoms qw( generate_pseudo );
use Sampling qw( sample_angles );
use PDBxParser qw( to_pdbx );

#
# Unit test: PseudoAtoms::generate_pseudo
#                            atom_id          num of pseudo atoms
# Example: ./generate_pseudo 12 "chi0 0,2*pi" "chi0 20" structure.dump
#

my ( $atom_id, $angle_ranges, $num_of_angles, $pdbx_dump_file ) = @ARGV;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

# Parses angle ranges for
my %angle_ranges = ( map { $_->[0] => [ split( ",", @$_[1] ) ] }
		     map { [ split( " ", $_ ) ] }
		     split( "&", $angle_ranges ) );

# Parsed number of rotations that will be done for each dihedral angle.
my %num_of_angles = ( map { $_->[0] => $_->[1] }
		      map { [ split( " ", $_ ) ] }
		      split( "&", $num_of_angles ) );

# Calculates angles that will be rotated along.
my %num_angle_values; # Numeric angle values.
for my $dihedral_angle ( sort keys %angle_ranges ) {
    my $min_angle = $angle_ranges{"$dihedral_angle"}[0];
    my $max_angle = $angle_ranges{"$dihedral_angle"}[1];
    $min_angle =~ s/pi/pi()/g;
    $max_angle =~ s/pi/pi()/g;
    $min_angle = eval( $min_angle );
    $max_angle = eval( $max_angle );
    my $small_angle = # Change of angle in each rotation step.
	2 * pi() / $num_of_angles{$dihedral_angle};
    $num_angle_values{"$dihedral_angle"} =
	sample_angles( [ [ $min_angle, $max_angle ] ], $small_angle );
}

%{ $atom_site } =
    ( %{ $atom_site },
      %{ generate_pseudo( $atom_site,
			  { "id" => [ $atom_id ] },
			  \%num_angle_values ) } );

to_pdbx( { "atom_site" => $atom_site } );
