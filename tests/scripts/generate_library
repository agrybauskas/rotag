#!/usr/bin/perl

use strict;
use warnings;

use LinearAlgebra qw( pi );
use PseudoAtoms qw( generate_library );

my ( $residue_id,
     $conf_model,
     $small_angle,
     $potential,
     $energy_cutoff_atom,
     $energy_cutoff_summed,
     $pdbx_dump_file ) = @ARGV;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

$small_angle =~ s/pi/pi\(\)/g;

my $rotamer_library =
    generate_library( { "atom_site"     => $atom_site,
			"residue_ids"   => [ $residue_id ],
			"small_angle"   => eval( $small_angle ),
			"conf_model" => $conf_model,
			"interactions"  => $potential,
			"energy_cutoff_atom"        => $energy_cutoff_atom  } );

print( "#residue_id,chi0,chi1,chi2,chi3,chi4\n" );
for my $residue_id ( keys %{ $rotamer_library } ) {
    for my $rotamer ( @{ $rotamer_library->{$residue_id} } ) {
	my @rotamer_entry = ( $residue_id );
	for my $angle_name ( sort { $a cmp $b }
			     keys %{ $rotamer->{"angles"} } ) {
	    push( @rotamer_entry,
	    	  sprintf( "%.1f",
			   180 * $rotamer->{"angles"}{"$angle_name"} / pi() ) );
	}
	for my $na ( 0..4-scalar( keys( %{ $rotamer->{"angles"} } ) ) ) {
	    push( @rotamer_entry, "" );
	}
	print( join( ",", @rotamer_entry ), "\n" );
    }
}
