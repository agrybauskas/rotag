#!/usr/bin/perl

use strict;
use warnings;

use BondParameters qw( rotatable_bonds );
use ForceField::NonBonded qw( hard_sphere );
use ForceField::Parameters;
use PDBxParser qw( filter
                   to_pdbx );
use PseudoAtoms qw( calc_favourable_angles );
use Sampling qw( sample_bond_parameters_qs_parsing );

my ( $residue_id,
     $residue_chain,
     $pdbx_model,
     $residue_alt,
     $bond_parameters_qs,
     $potential,
     $interaction_specifier,
     $pdbx_dump_file ) = @ARGV;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};
my $sig_figs_min = $parameters->{'_[local]_constants'}{'sig_figs_min'};

rotatable_bonds( $parameters, $atom_site );

$bond_parameters_qs =~ s/\s//g;
my $bond_parameters =
    sample_bond_parameters_qs_parsing( $parameters, $bond_parameters_qs );

my %interaction_specifier = ( map { $_->[0] => [ split( ",", @$_[1] ) ] }
                              map { [ split( " ", $_ ) ] }
                              split( "&", $interaction_specifier ) );
my $interaction_site = filter( { 'atom_site' => $atom_site,
                                 'include' => \%interaction_specifier } );

my $favourable_bond_parameters =
    calc_favourable_angles( { 'parameters' => $parameters,
                              'atom_site' => $atom_site,
                              'residue_unique_key' =>
                                  "${residue_id},${residue_chain},".
                                  "${pdbx_model},${residue_alt}",
                              'interaction_site' => $interaction_site,
                              'bond_parameters' => $bond_parameters,
                              'non_bonded_potential' => \&hard_sphere,
                              'threads' => 1
                            } );

my $bond_parameter_id = 1;
for my $bond_parameter_values ( @{ $favourable_bond_parameters } ) {
    use Data::Dumper;
    print STDERR Dumper $bond_parameter;
    # my @angle_names = map { "chi${_}" } 1..$#{ $angles }+1;
    # for my $i ( 0..$#{ $angles } ) {
    #     print $angle_id, ', ', $angle_names[$i], ', ',
    #         sprintf( $sig_figs_min, 180 * $angles->[$i] / $pi ), "\n";
    # }
    $bond_parameter_id++;
}
