#!/usr/bin/perl

use strict;
use warnings;

use BondParameters qw( collect_dihedral_angles
                       collect_bond_angles
                       collect_bond_lengths
                       rotatable_bonds );
use ForceField::NonBonded qw( hard_sphere );
use ForceField::Parameters;
use PDBxParser qw( filter
                   to_pdbx );
use PseudoAtoms qw( calc_favourable_angles );
use Sampling qw( sample_bond_parameters_qs_parsing );

my ( $residue_id,
     $residue_chain,
     $pdbx_model,
     $residue_alt,
     $bond_parameters_qs,
     $potential,
     $interaction_specifier,
     $pdbx_dump_file ) = @ARGV;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};
my $sig_figs_min = $parameters->{'_[local]_constants'}{'sig_figs_min'};

rotatable_bonds( $parameters, $atom_site );

$bond_parameters_qs =~ s/\s//g;
my $bond_parameters =
    sample_bond_parameters_qs_parsing( $parameters, $bond_parameters_qs );

my %interaction_specifier = ( map { $_->[0] => [ split( ",", @$_[1] ) ] }
                              map { [ split( " ", $_ ) ] }
                              split( "&", $interaction_specifier ) );
my $interaction_site = filter( { 'atom_site' => $atom_site,
                                 'include' => \%interaction_specifier } );

my $residue_unique_key =
    "${residue_id},${residue_chain},${pdbx_model},${residue_alt}," .
    "${residue_id},$residue_chain";
my $favourable_bond_parameters =
    calc_favourable_angles( { 'parameters' => $parameters,
                              'atom_site' => $atom_site,
                              'residue_unique_key' => $residue_unique_key,
                              'interaction_site' => $interaction_site,
                              'bond_parameters' => $bond_parameters,
                              'non_bonded_potential' => \&hard_sphere,
                              'threads' => 1
                            } );

my $dihedral_angles =
    collect_dihedral_angles( $atom_site )->{$residue_unique_key};
my $bendable_angles =
    collect_bond_angles( $atom_site )->{$residue_unique_key};
my $stretchable_bonds =
    collect_bond_lengths( $atom_site )->{$residue_unique_key};

my %bond_parameters = (
    ( defined $dihedral_angles ? %{ $dihedral_angles } : () ),
    ( defined $stretchable_bonds ? %{ $stretchable_bonds } : () ),
    ( defined $bendable_angles ? %{ $bendable_angles } : () ),
);

my @bond_parameter_names =
    sort { $bond_parameters{$a}{'order'} <=>
           $bond_parameters{$b}{'order'} }
    keys %bond_parameters;

my $bond_parameter_id = 1;
for my $bond_parameter_values ( @{ $favourable_bond_parameters } ) {
    for my $i ( 0..$#{ $bond_parameter_values } ) {
        print $bond_parameter_id, ', ', $bond_parameter_names[$i], ', ',
            sprintf( $sig_figs_min, 180 * $bond_parameter_values->[$i] / $pi ),
            "\n";
    }
    $bond_parameter_id++;
}
