#!/usr/bin/perl

use strict;
use warnings;

use AtomInteractions qw( hard_sphere );
use Constants qw( $PI
                  $SIG_FIGS );
use PDBxParser qw( filter
                   to_pdbx );
use PseudoAtoms qw( calc_favourable_angle );

my ( $atom_id,
     $checkable_angles,
     $interaction_specifier,
     $energy_cutoff_atom,
     $pdbx_dump_file ) = @ARGV;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

my @checkable_angles;
my @checkable_energies;
for my $angles ( split /;/, $checkable_angles ) {
    my @current_angles;
    my @current_energies;
    for my $angle ( split /,/, $angles ) {
        $angle =~ s/pi/\$PI/g;
        push @current_angles, eval( $angle );
        push @current_energies, 0.0;
    }
    push @checkable_angles, \@current_angles;
    push @checkable_energies, \@current_energies;
}

my %interaction_specifier = ( map { $_->[0] => [ split( ",", @$_[1] ) ] }
                              map { [ split( " ", $_ ) ] }
                              split( "&", $interaction_specifier ) );
my $interaction_site = filter( { 'atom_site' => $atom_site,
                                 'include' => \%interaction_specifier } );

# my ( $favourable_angles, $favourable_energies ) =
#     @{
        calc_favourable_angle( { 'atom_site' => $atom_site,
                                'atom_id' => $atom_id,
                                'interaction_site' => $interaction_site,
                                'potential_function' => \&hard_sphere,
                                'energy_cutoff_atom' => $energy_cutoff_atom,
                                'threads' => 1,
                              }, [ \@checkable_angles, \@checkable_energies ] )# }
;

# my $angle_id = 1;
# for my $angles ( @{ $favourable_angles } ) {
#     my @angle_names = map { "chi${_}" } 1..$#{ $angles }+1;
#     for my $i ( 0..$#{ $angles } ) {
#         print $angle_id, ', ', $angle_names[$i], ', ',
#             sprintf( $SIG_FIGS, 180 * $angles->[$i] / $PI ), "\n";
#     }
#     $angle_id++;
# }
