#!/usr/bin/perl

use strict;
use warnings;

use BondParameters qw( rotatable_bonds );
use ForceField::NonBonded qw( hard_sphere );
use ForceField::Parameters;
use PDBxParser qw( filter
                   to_pdbx );
use PseudoAtoms qw( calc_favourable_angle );

my ( $atom_id,
     $checkable_angles,
     $interaction_specifier,
     $pdbx_dump_file ) = @ARGV;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};
my $sig_figs_min = $parameters->{'_[local]_constants'}{'sig_figs_min'};

rotatable_bonds( $parameters, $atom_site );

my @checkable_angles;
my @checkable_energies;
for my $angles ( split /;/, $checkable_angles ) {
    my @current_angles;
    my @current_energies;
    for my $angle ( split /,/, $angles ) {
        $angle =~ s/pi/\$pi/g;
        push @current_angles, eval( $angle );
        push @current_energies, 0.0;
    }
    push @checkable_angles, \@current_angles;
    push @checkable_energies, \@current_energies;
}

my %interaction_specifier = ( map { $_->[0] => [ split( ",", @$_[1] ) ] }
                              map { [ split( " ", $_ ) ] }
                              split( "&", $interaction_specifier ) );
my $interaction_site = filter( { 'atom_site' => $atom_site,
                                 'include' => \%interaction_specifier } );

my ( $favourable_angles, $favourable_energies ) =
    @{ calc_favourable_angle( { 'parameters' => $parameters,
                                'atom_site' => $atom_site,
                                'atom_id' => $atom_id,
                                'interaction_site' => $interaction_site,
                                'non_bonded_potential' => \&hard_sphere,
                                'threads' => 1,
                              }, [ \@checkable_angles, \@checkable_energies ] )};

my $angle_id = 1;
for my $angles ( @{ $favourable_angles } ) {
    my @angle_names = map { "chi${_}" } 1..$#{ $angles }+1;
    for my $i ( 0..$#{ $angles } ) {
        print $angle_id, ', ', $angle_names[$i], ', ',
            sprintf( $sig_figs_min, 180 * $angles->[$i] / $pi ), "\n";
    }
    $angle_id++;
}
