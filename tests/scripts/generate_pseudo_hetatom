#!/usr/bin/perl

use strict;
use warnings;

use BondParameters qw( bendable_angles
                       rotatable_bonds
                       stretchable_bonds );
use ForceField::Parameters;
use PseudoAtoms qw( generate_pseudo );
use Sampling qw( sample_bond_parameters );
use PDBxParser qw( to_pdbx );

#
# Unit test: PseudoAtoms::generate_pseudo_hetatom,
# Example: ./generate_pseudo_hetatom 12 "chi1 0,2*pi & CA-CB 0,0.25" "chi1 20 & CA-CB" structure.dump 1
#

my ( $atom_id, $bond_parameter_ranges, $num_of_bond_parameter_instances,
     $pdbx_dump_file, $no_full_range ) = @ARGV;

$no_full_range //= 0;

my $atom_site;
open( my $fh, "<", $pdbx_dump_file );
while( <$fh> ) {
    $atom_site .= "$_" ;
}
close( $fh );
$atom_site = eval( $atom_site );

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};

rotatable_bonds( $parameters, $atom_site, { 'include_hetatoms' => 1 } );
stretchable_bonds( $parameters, $atom_site, { 'include_hetatoms' => 1 } );
bendable_angles( $parameters, $atom_site, { 'include_hetatoms' => 1 } );

# Parses angle and bond ranges.
my %bond_parameter_ranges = ( map { $_->[0] => [ split( ",", @$_[1] ) ] }
                     map { [ split( " ", $_ ) ] }
                     split( "&", $bond_parameter_ranges ) );

# Parsed number of rotations that will be done for each dihedral angle, bond
# angle and length.
my %num_of_bond_parameter_instances =
    ( map { $_->[0] => $_->[1] }
      map { [ split( " ", $_ ) ] }
      split( "&", $num_of_bond_parameter_instances ) );

# Calculates angles and lengths that will be modified.
my %num_of_bond_parameter_values;
for my $bond_parameter ( sort keys %bond_parameter_ranges ) {
    my $min_bond_parameter = $bond_parameter_ranges{"$bond_parameter"}[0];
    my $max_bond_parameter = $bond_parameter_ranges{"$bond_parameter"}[1];
    $min_bond_parameter =~ s/pi/\$pi/g;
    $max_bond_parameter =~ s/pi/\$pi/g;
    $min_bond_parameter = eval( $min_bond_parameter );
    $max_bond_parameter = eval( $max_bond_parameter );
    $num_of_bond_parameter_values{"$bond_parameter"} = sample_bond_parameters(
        [ [ $min_bond_parameter, $max_bond_parameter ] ],
        $num_of_bond_parameter_instances{$bond_parameter}
    );
}

%{ $atom_site } =
    ( %{ $atom_site },
      %{ generate_pseudo(
             { 'parameters' => $parameters,
               'atom_site' => $atom_site,
               'atom_specifier' => { "id" => [ $atom_id ] },
               'bond_parameter_values' => \%num_of_bond_parameter_values,
               'include_hetatoms' => 1,
               'do_bond_stretching' => 1,
               'do_angle_bending' => 1,
               'do_bond_torsion' => 1 } ) } );

my %pdbx =();
$pdbx{'_atom_site'}{'data'} = $atom_site;
$pdbx{'_atom_site'}{'metadata'}{'is_loop'} = 1;
$pdbx{'_atom_site'}{'metadata'}{'type'} = 'indexed';

to_pdbx( \%pdbx );
