#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Carp;
use Getopt::Long;
use List::MoreUtils qw( uniq );
use List::Util qw( sum );
use Try::Tiny;

use ForceField::Parameters;
use Logging qw( error
                warning );
use PDBxParser qw( filter
                   obtain_pdbx_data
                   raw2indexed
                   related_category_data
                   split_by
                   to_pdbx
                   to_csv );

use Measure qw( rmsd
                rmsd_sidechains );
use Version qw( $VERSION );

Getopt::Long::Configure qw( gnu_getopt );

our $VERSION = $VERSION;

#*rotag_rmsd [options] -c <groups> <file>...
#*    calculate rmsd between two groups of atoms.
#*
#*Usage:
#*    rotag_rmsd input.cif > output.cif
#*
#*Options:
#*    -c, --compare <str>   compares atoms of the defined groups.
#*
#*                          E.g.: -c '1, 2' or -c '3, 4; 5, 7'
#*
#*    -S, --side-chains     compares only side-chain atoms agains other
#*                          side-chain atoms.
#*
#*    -b, --best-case       chooses best RMSD value of side-chain comparison.
#*
#*    -d, --decompose       decompose RMSD value of the group to its
#*                          constituents.
#*    -r, --related-data    only related data records from other categories are
#*                          shown when '_atom_site' records are selected.
#*
#*
#*    -F, --format <format> output format (default: pdbx | csv).
#*
#*    -v, --version         print version.

# --------------------------------- Options ----------------------------------- #

my $comparison = q{};
my $rmsd_sidechains = 0;
my $rmsd_best_case = 0;
my $do_decompose = 0;
my $is_related = 0;
my $output_format = 'pdbx';

local $SIG{__WARN__} = sub {
    warning( { 'program' => $0, 'message' => @_ } );
};

local $SIG{__DIE__} = sub {
    error( { 'program' => $0, 'message' => @_ } );
};

GetOptions(
    'compare|c=s' => \$comparison,
    'side-chains|S' => sub { $rmsd_sidechains = 1; },
    'best-case|b' => sub { $rmsd_best_case = 1; },
    'decompose|d' => sub { $do_decompose = 1; },
    'related-data|r' => sub { $is_related = 1 },
    'format|F=s' => \$output_format,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {$help_message =~ s/^\*$/ /smgx;}
                            if( $help_message ) { $help_message =~ s/^\*//smgx; }
                            if( $help_message ) { print $help_message, "\n"; }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
)  or error( { 'program' => $0,
               'message' => "mistake in command line argument.\n" } );

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

$comparison =~ s/ //g;
my @comparison_groups = map { [ split /,/, $_ ] } ( split /;/, $comparison );

error( { 'message' => "No comparison groups are selected. Use -c argument.\n" } )
    if ! @comparison_groups;

my %atom_site_groups = ();

my $parameters = Parameters->new();
my $sig_figs_max = $parameters->{'_[local]_constants'}{'sig_figs_max'};

for my $pdbx_file ( @ARGV ) {
    my $pdbxs =
        obtain_pdbx_data( $pdbx_file, [ '_atom_site' ], { 'read_stream' => 1 } );

    for my $pdbx ( @{ $pdbxs } ) {
        raw2indexed( $pdbx, { 'attributes' => { '_atom_site' => [ 'id' ] } } );

        my $atom_site = $pdbx->{'_atom_site'}{'data'};

        # Assigns filters atoms and assigns to specified groups.
        my @group_ids =
            uniq( @{ filter( { 'atom_site' => $atom_site,
                               'data' => [ '[local]_selection_group' ],
                               'is_list' => 1 } ) } );

        for my $group_id ( @group_ids ) {
            if( ! exists $atom_site_groups{$group_id} ) {
                my $group_atom_site =
                    filter( { 'atom_site' => $atom_site,
                              'include' =>
                                  { '[local]_selection_state' => [ 'T' ],
                                    '[local]_selection_group' => [$group_id] }});
                $atom_site_groups{$group_id} = $group_atom_site;
            } else {
                confess 'there are multiple instances of the group in' .
                        ' different files';
            }
        }
    }
}

exit if ! %atom_site_groups;

# Calculates RMSD.
my %pdbx_data;
if( $do_decompose ) {
    $pdbx_data{'_[local]_rmsd'}{'metadata'}{'attributes'} =
        [ 'id', 'group_1_id', 'atom_1_id', 'label_atom_1_id', 'label_seq_1_id',
          'label_comp_1_id', 'label_asym_1_id', 'pdbx_PDB_model_num_1',
          'label_alt_1_id', 'group_2_id', 'atom_2_id', 'label_atom_2_id',
          'label_seq_2_id', 'label_comp_2_id', 'label_asym_2_id',
          'pdbx_PDB_model_num_2', 'label_alt_2_id', 'value' ];
    $pdbx_data{'_[local]_rmsd'}{'metadata'}{'is_loop'} = 1;
    $pdbx_data{'_[local]_rmsd'}{'metadata'}{'is_indexed'} = 0;
} else {
    $pdbx_data{'_[local]_rmsd'}{'metadata'}{'attributes'} =
        [ 'id', 'group_1_id', 'group_2_id', 'value' ];
    $pdbx_data{'_[local]_rmsd'}{'metadata'}{'is_loop'} = 1;
    $pdbx_data{'_[local]_rmsd'}{'metadata'}{'is_indexed'} = 0;
}

my $rmsd_counter = 1;

for my $comparison_group ( @comparison_groups ) {
    if( scalar @{ $comparison_group } != 2 ) {
        confess 'there has to be two groups of atoms to be compared against';
    }

    # Checks if these groups exist.
    for my $group ( @{ $comparison_group } ) {
        if( ! exists $atom_site_groups{$group} ) {
            confess "group $group is not present in pdbx"
        }
    }

    # Generates the comparison pairs.
    my $first_atom_groups =
        split_by( { 'atom_site' => $atom_site_groups{$comparison_group->[0]},
                    'attributes' => [ 'label_seq_id', 'label_asym_id',
                                      'pdbx_PDB_model_num' ] } );
    my $second_atom_groups =
        split_by( { 'atom_site' => $atom_site_groups{$comparison_group->[1]},
                    'attributes' => [ 'label_seq_id', 'label_asym_id',
                                      'pdbx_PDB_model_num' ] } );

    for my $first_group_key ( sort keys %{ $first_atom_groups } ) {
        my $first_group_atom_ids = $first_atom_groups->{$first_group_key};
        my $second_group_atom_ids = $second_atom_groups->{$first_group_key};
        my $first_group_atom_site =
            filter( { 'atom_site' => $atom_site_groups{$comparison_group->[0]},
                      'include' => { 'id' => $first_group_atom_ids } } );
        my $second_group_atom_site =
            filter( { 'atom_site' => $atom_site_groups{$comparison_group->[1]},
                      'include' => { 'id' => $second_group_atom_ids } } );

        if( $rmsd_sidechains ) {
            next if ( ! defined $second_group_atom_ids ||
                      ! @{ $second_group_atom_ids } );

            my $rmsd_sidechain_comparisons =
                rmsd_sidechains( $parameters,
                                 $first_group_atom_site,
                                 $second_group_atom_site,
                                 $first_group_key,
                                 { 'best_case' => $rmsd_best_case } );

            for my $rmsd_sidechain_comparison ( @{$rmsd_sidechain_comparisons} ){
                if( $do_decompose ) {
                    push @{ $pdbx_data{'_[local]_rmsd'}{'data'} },
                         $rmsd_counter,
                         @{ $rmsd_sidechain_comparison };
                    $rmsd_counter++;
                }
            }

            if( ! $do_decompose ) {
                my $rmsd_sum =
                    sum( map { $_->[-1] } @{ $rmsd_sidechain_comparisons } );
                my $rmsd_count = scalar @{ $rmsd_sidechain_comparisons };
                my $rmsd_average = $rmsd_sum / $rmsd_count;
                push @{ $pdbx_data{'_[local]_rmsd'}{'data'} },
                    $rmsd_counter,
                    $rmsd_sidechain_comparisons->[0][0],
                    $rmsd_sidechain_comparisons->[0][9],
                    sprintf $sig_figs_max, $rmsd_average;
            }
        } else {
            my $first_group_data =
                filter( { 'atom_site' => $atom_site_groups{$comparison_group->[0]},
                          'data' =>
                              [ 'id', '[local]_selection_group', 'label_atom_id',
                                'label_seq_id', 'label_comp_id', 'label_asym_id',
                                'pdbx_PDB_model_num', 'label_alt_id', 'Cartn_x',
                                'Cartn_y', 'Cartn_z' ] } );
            my $second_group_data =
                filter( { 'atom_site' => $atom_site_groups{$comparison_group->[1]},
                          'data' =>
                              [ 'id', '[local]_selection_group', 'label_atom_id',
                                'label_seq_id', 'label_comp_id', 'label_asym_id',
                                'pdbx_PDB_model_num', 'label_alt_id', 'Cartn_x',
                                'Cartn_y', 'Cartn_z' ] } );

            # Checks the length of the atom sets.
            # TODO: error message is duplicated in Measure::rmsd().
            if( scalar @{ $first_group_data } ne scalar @{ $second_group_data }){
                confess 'comparing different sizes of sets of the atoms is not ' .
                        'allowed';
            }

            # Sorts by residue name first by checking if their residue names are
            # correct.
            $first_group_data  =
                [ sort { $a->[2] cmp $b->[2] } @{ $first_group_data  }];
            $second_group_data =
                [ sort { $a->[2] cmp $b->[2] } @{ $second_group_data }];

            my @first_group_coord;
            my @second_group_coord;

            for( my $i = 0; $i <= $#{ $first_group_data }; $i++ ) {
                if( $first_group_data->[$i][2] ne $second_group_data->[$i][2] ) {
                    confess "atom names do not match: $first_group_data->[$i][2] " .
                            "and $second_group_data->[$i][2]";
                }

                if( $do_decompose ) {
                    push @{ $pdbx_data{'_[local]_rmsd'}{'data'} },
                        $rmsd_counter,
                        ( @{ $first_group_data->[$i] } )[0..7],
                        ( @{ $second_group_data->[$i] })[0..7],
                        sprintf $sig_figs_max,
                        rmsd( [ [ ( @{ $first_group_data->[$i] }  )[8..10] ] ],
                              [ [ ( @{ $second_group_data->[$i] } )[8..10] ] ] );
                } else {
                    push @first_group_coord,
                        [ ( @{ $first_group_data->[$i] } )[8..10] ];
                    push @second_group_coord,
                        [ ( @{ $second_group_data->[$i] } )[8..10] ];
                }
            }

            if( ! $do_decompose ) {
                push @{ $pdbx_data{'_[local]_rmsd'}{'data'} },
                    $rmsd_counter, $comparison_group->[0], $comparison_group->[1],
                    sprintf $sig_figs_max,
                    rmsd( \@first_group_coord, \@second_group_coord );
            }

            $rmsd_counter++;
        }
    }
}

# Shows dihedral angles related to selected atoms used to calculate RMSD.
if( $is_related && $do_decompose ) {
    # my $related_data = related_category_data(
    #     \%pdbx_data,
    #     { '_[local]_rotamer_angle' =>
    #       { '_[local]_rmsd' =>
    #             [ { 'keys' =>
    #                     [ 'label_seq_id', 'label_asym_id',
    #                       'pdbx_PDB_model_num', 'label_alt_id' ],
    #                 'reference_keys' =>
    #                     [ 'label_seq_1_id', 'label_asym_1_id',
    #                       'pdbx_PDB_model_num_1', 'label_alt_1_id' ] } ] } } );

    # for my $related_category ( keys %{ $related_data } ) {
    #     $pdbx_data{$related_category}{'data'} =
    #         indexed2raw( { $related_category =>
    #                            $related_data->{$related_category} } )
    #                                         ->{$related_category}{'data'};
    # }
}

# Prints out cif or csv
# TODO: decide what to do when group data is empty.
if( $output_format eq 'pdbx' ) {
    to_pdbx( \%pdbx_data );
} elsif( $output_format eq 'csv' ) {
    to_csv( { '_[local]_rmsd' => $pdbx_data{'_[local]_rmsd'} } );
}
