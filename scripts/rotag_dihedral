#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use File::Basename;
use Getopt::Long;
use List::MoreUtils qw( uniq );
use Try::Tiny;

use BondParameters qw( collect_dihedral_angles
                       rotatable_bonds );
use BondProperties qw( hybridization );
use Combinatorics qw( permutation );
use ConnectAtoms qw( connect_atoms
                     connect_hetatoms );
use ForceField::Parameters;
use Logging qw( error
                warning );
use Measure qw( dihedral_angle );
use PDBxParser qw( filter
                   filter_by_unique_residue_key
                   mark_selection
                   obtain_pdbx_data
                   raw2indexed
                   to_csv
                   to_pdbx );
use Version qw( $VERSION );

Getopt::Long::Configure qw( gnu_getopt );

our $VERSION = $VERSION;

#*rotag_dihedral [options] [--] <cif-file>...
#*    calculate dihedral angles of residues or selected atoms.
#*
#*Usage:
#*    rotag_dihedral input.cif > output.cif
#*
#*Options:
#*    -S, --side-chains
#*                        calculates chi angles of the side-chain atoms.
#*    -M, --main-chains
#*                        calculates phi and psi angles of the main-chain atoms.
#*    -H, --hetero-atoms
#*                        calculates improper dihedral angles between CA-C-N-X,
#*                        when X is a heteroatom.
#*    -r, --radians
#*                        angles are in radians.
#*    -F, --format <format>
#*                        output format (default: pdbx | csv).
#*    -v, --version
#*                        print version.

# --------------------------------- Options ----------------------------------- #

my $calc_sidechain = 0;
my $calc_mainchain = 0;
my $calc_hetatoms = 0;
my $in_radians = 0;
my $output_format = 'pdbx';

local $SIG{__WARN__} = sub {
    warning( { 'program' => $0,
               'message' => @_,
               'filename' => join( ', ', @ARGV ) } );
};

local $SIG{__DIE__} = sub {
    error( { 'program' => $0,
             'message' => @_,
             'filename' => join( ', ', @ARGV ) } );
};

GetOptions(
    'side-chains|S' => sub { $calc_sidechain = 1 },
    'main-chains|M' => sub { $calc_mainchain = 1 },
    'hetero-atoms|H' => sub { $calc_hetatoms = 1 },
    'radians|r' => sub { $in_radians = 1 },
    'format|F=s' => \$output_format,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {
                                $help_message =~ s/^\*$/ /smgx;
                                $help_message =~ s/^\*//smgx;
                                print $help_message, "\n";
                            }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or error( { 'program' => $0,
              'message' => "mistake in command line argument.\n" } );

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};
my $sig_figs_min = $parameters->{'_[local]_constants'}{'sig_figs_min'};
my $sig_figs_max = $parameters->{'_[local]_constants'}{'sig_figs_max'};

for my $pdbx_file ( @ARGV ) {
    my $pdbx = obtain_pdbx_data( $pdbx_file, [ '_atom_site' ] );
    raw2indexed( $pdbx, { 'attributes' => { '_atom_site' => [ 'id' ] } } );

    my $atom_site = $pdbx->{'_atom_site'}{'data'};

    if( ! defined $atom_site ) {
        warning( { 'program' => $0,
                   'message' => "no atom sites were detected.\n" } );
        next;
    }

    # Calculates dihedral angles
    if( $calc_sidechain ) {
        $pdbx->{'_[local]_dihedral_angle'}{'metadata'}{'attributes'} =
            [ 'id', 'label_comp_id', 'label_seq_id', 'label_asym_id',
              'pdbx_PDB_model_num', 'label_alt_id', 'atom_1_id', 'label_atom_1_id',
              'atom_2_id', 'label_atom_2_id', 'atom_3_id', 'label_atom_3_id',
              'atom_4_id', 'label_atom_4_id', 'type', 'value', 'units' ];
        $pdbx->{'_[local]_dihedral_angle'}{'metadata'}{'is_loop'} = 1;
        $pdbx->{'_[local]_dihedral_angle'}{'metadata'}{'type'} = 'record';

        my $dihedral_site =
            filter( { 'atom_site' => $atom_site,
                      'include' => { '[local]_selection_state' => [ 'T' ] } } );

        # Selects all atoms if no specific atoms are selected.
        if( ! %{ $dihedral_site } ) {
            $dihedral_site = $atom_site;
            mark_selection( $dihedral_site,
                            { 'target' => [ keys %{ $dihedral_site } ] } );
        }

        connect_atoms( $parameters, $dihedral_site );
        connect_hetatoms( $parameters, $dihedral_site,
                          { 'do_bond_rotation' => 1 } ) if $calc_hetatoms;
        hybridization( $parameters, $dihedral_site );

        rotatable_bonds( $parameters, $dihedral_site,
                         { 'include_mainchain' => $calc_mainchain,
                           'include_hetatoms' => $calc_hetatoms } );
        my $dihedral_angles = collect_dihedral_angles( $dihedral_site );

        my $dihedral_id = 1;
        my %visited_dihedral_angles = ();
        for my $residue_unique_key ( sort keys %{ $dihedral_angles } ) {
            for my $angle_name (
                sort keys %{ $dihedral_angles->{$residue_unique_key} } ) {
                my @atom_ids = @{ $dihedral_angles->{$residue_unique_key}
                                                    {$angle_name}{'atom_ids'} };
                my $angle_key = join ',', @atom_ids;

                next if $visited_dihedral_angles{$angle_key};
                $visited_dihedral_angles{$angle_key} = 1;

                # The destinction between main-chain and side-chain dihedral
                # angles is that different from side-chain, main-chain dihedral
                # angles span multiple residues. So, it has to be dealt with.
                # HACK: for now, only 'alt_id' is checked.
                my $residue_atom_id =
                    scalar( uniq map { $dihedral_site->{$_}{'label_alt_id'} }
                                     @atom_ids ) > 1 ?
                    $atom_ids[3] :
                    $atom_ids[2];

                push @{ $pdbx->{'_[local]_dihedral_angle'}{'data'} },
                    { 'id' => $dihedral_id,
                      'label_comp_id' =>
                          $dihedral_site->{$residue_atom_id}{'label_comp_id'},
                      'label_seq_id' =>
                          $dihedral_site->{$residue_atom_id}{'label_seq_id'},
                      'label_asym_id' =>
                          $dihedral_site->{$residue_atom_id}{'label_asym_id'},
                      'pdbx_PDB_model_num' =>
                          $dihedral_site->{$residue_atom_id}{'pdbx_PDB_model_num'},
                      'label_alt_id' =>
                          $dihedral_site->{$residue_atom_id}{'label_alt_id'},
                      'atom_1_id' => $atom_ids[0],
                      'label_atom_1_id' =>
                          $dihedral_site->{$atom_ids[0]}{'label_atom_id'},
                      'atom_2_id' => $atom_ids[1],
                      'label_atom_2_id' =>
                          $dihedral_site->{$atom_ids[1]}{'label_atom_id'},
                      'atom_3_id' => $atom_ids[2],
                      'label_atom_3_id' =>
                          $dihedral_site->{$atom_ids[2]}{'label_atom_id'},
                      'atom_4_id' => $atom_ids[3],
                      'label_atom_4_id' =>
                          $dihedral_site->{$atom_ids[3]}{'label_atom_id'},
                      'type' => $angle_name,
                      'value' => ( $in_radians ?
                                   sprintf $sig_figs_max,
                                           $dihedral_angles->{$residue_unique_key}
                                                             {$angle_name}
                                                             {'value'} :
                                   sprintf $sig_figs_min,
                                           $dihedral_angles->{$residue_unique_key}
                                                             {$angle_name}
                                                             {'value'} * 180 / $pi ),
                      'units' => ( $in_radians ? 'radians': 'degrees' ) };
                $dihedral_id++;
            }
        }

    } else {
        $pdbx->{'_[local]_dihedral_angle'}{'metadata'}{'attributes'} =
            [ 'id', 'label_atom_1_id', 'atom_1_id', 'label_comp_1_id',
              'label_seq_1_id', 'label_asym_1_id', 'pdbx_PDB_model_num_1',
              'label_alt_1_id', 'label_atom_2_id', 'atom_2_id', 'label_comp_2_id',
              'label_seq_2_id', 'label_asym_2_id', 'pdbx_PDB_model_num_2',
              'label_alt_2_id', 'label_atom_3_id', 'atom_3_id', 'label_comp_3_id',
              'label_seq_3_id', 'label_asym_3_id', 'pdbx_PDB_model_num_3',
              'label_alt_3_id', 'label_atom_4_id', 'atom_4_id', 'label_comp_4_id',
              'label_seq_4_id', 'label_asym_4_id', 'pdbx_PDB_model_num_4',
              'label_alt_4_id', 'value', 'units' ];
        $pdbx->{'_[local]_dihedral_angle'}{'metadata'}{'is_loop'} = 1;
        $pdbx->{'_[local]_dihedral_angle'}{'metadata'}{'type'} = 'record';

        my $dihedral_site =
            filter( { 'atom_site' => $atom_site,
                      'include' => { '[local]_selection_state' => [ 'T' ] },
                      'exclude' => { '[local]_selection_group' => [ q{?} ] } } );

        if( ! %{ $dihedral_site } ) {
            warning( { 'program' => $0,
                       'message' => 'no atoms were selected for calculating ' .
                                    "dihedral angles.\n" } );
            next;
        }

        my @dihedral_atom_ids =
            sort { $dihedral_site->{"$a"}{'[local]_selection_group'} <=>
                   $dihedral_site->{"$b"}{'[local]_selection_group'} ||
                   $dihedral_site->{"$a"}{'id'} <=>
                   $dihedral_site->{"$b"}{'id'}  }
            keys %{ $dihedral_site };

        my $dihedral_id = 1;
        my $dihedral_atom_ids_comb =
            permutation( 4, [], [ map { \@dihedral_atom_ids } 0..3 ], [] );
        my %visited_comparisons = ();
        for my $dihedral_atom_ids ( @{ $dihedral_atom_ids_comb } ) {
            my $first_atom_id = $dihedral_atom_ids->[0];
            my $second_atom_id = $dihedral_atom_ids->[1];
            my $third_atom_id = $dihedral_atom_ids->[2];
            my $fourth_atom_id = $dihedral_atom_ids->[3];

            next if $first_atom_id == $second_atom_id ||
                    $first_atom_id == $third_atom_id ||
                    $first_atom_id == $fourth_atom_id ||
                    $second_atom_id == $third_atom_id ||
                    $second_atom_id == $fourth_atom_id ||
                    $third_atom_id == $fourth_atom_id;
            next if defined $visited_comparisons{$first_atom_id}{$second_atom_id}
                                                {$third_atom_id}{$fourth_atom_id};

            $visited_comparisons{$first_atom_id}{$second_atom_id}
                                {$third_atom_id}{$fourth_atom_id} = 1;
            $visited_comparisons{$fourth_atom_id}{$third_atom_id}
                                {$second_atom_id}{$first_atom_id} = 1;

            my $dihedral_angle =
                dihedral_angle(
                    [ map { [ $dihedral_site->{$_}{'Cartn_x'},
                              $dihedral_site->{$_}{'Cartn_y'},
                              $dihedral_site->{$_}{'Cartn_z'} ] }
                      ( $first_atom_id, $second_atom_id,
                        $third_atom_id, $fourth_atom_id ) ] );

            push @{ $pdbx->{'_[local]_dihedral_angle'}{'data'} },
                  { 'id' => $dihedral_id,
                    'label_atom_1_id' => $first_atom_id,
                    'atom_1_id' =>
                        $dihedral_site->{$first_atom_id}{'label_atom_id'},
                    'label_comp_1_id' =>
                        $dihedral_site->{$first_atom_id}{'label_comp_id'},
                    'label_seq_1_id' =>
                        $dihedral_site->{$first_atom_id}{'label_seq_id'},
                    'label_asym_1_id' =>
                        $dihedral_site->{$first_atom_id}{'label_asym_id'},
                    'pdbx_PDB_model_num_1' =>
                        $dihedral_site->{$first_atom_id}{'pdbx_PDB_model_num'},
                    'label_alt_1_id' =>
                        $dihedral_site->{$first_atom_id}{'label_alt_id'},
                    'label_atom_2_id' => $second_atom_id,
                    'atom_2_id' =>
                        $dihedral_site->{$second_atom_id}{'label_atom_id'},
                    'label_comp_2_id' =>
                        $dihedral_site->{$second_atom_id}{'label_comp_id'},
                    'label_seq_2_id' =>
                        $dihedral_site->{$second_atom_id}{'label_seq_id'},
                    'label_asym_2_id' =>
                        $dihedral_site->{$second_atom_id}{'label_asym_id'},
                    'pdbx_PDB_model_num_2' =>
                        $dihedral_site->{$second_atom_id}{'pdbx_PDB_model_num'},
                    'label_alt_2_id' =>
                        $dihedral_site->{$second_atom_id}{'label_alt_id'},
                    'label_atom_3_id' => $third_atom_id,
                    'atom_3_id' =>
                        $dihedral_site->{$third_atom_id}{'label_atom_id'},
                    'label_comp_3_id' =>
                        $dihedral_site->{$third_atom_id}{'label_comp_id'},
                    'label_seq_3_id' =>
                        $dihedral_site->{$third_atom_id}{'label_seq_id'},
                    'label_asym_3_id' =>
                        $dihedral_site->{$third_atom_id}{'label_asym_id'},
                    'pdbx_PDB_model_num_3' =>
                        $dihedral_site->{$third_atom_id}{'pdbx_PDB_model_num'},
                    'label_alt_3_id' =>
                        $dihedral_site->{$third_atom_id}{'label_alt_id'},
                    'label_atom_4_id' => $fourth_atom_id,
                    'atom_4_id' =>
                        $dihedral_site->{$fourth_atom_id}{'label_atom_id'},
                    'label_comp_4_id' =>
                        $dihedral_site->{$fourth_atom_id}{'label_comp_id'},
                    'label_seq_4_id' =>
                        $dihedral_site->{$fourth_atom_id}{'label_seq_id'},
                    'label_asym_4_id' =>
                        $dihedral_site->{$fourth_atom_id}{'label_asym_id'},
                    'pdbx_PDB_model_num_4' =>
                        $dihedral_site->{$fourth_atom_id}{'pdbx_PDB_model_num'},
                    'label_alt_4_id' =>
                        $dihedral_site->{$fourth_atom_id}{'label_alt_id'},
                    'value' =>
                        ( $in_radians ? sprintf $sig_figs_max, $dihedral_angle :
                          sprintf $sig_figs_min, $dihedral_angle * 180 / $pi ),
                    'units' => ( $in_radians ? 'radians' : 'degrees' ) };

            $dihedral_id++;
        }
    }

    if( $output_format eq 'pdbx' ) {
        to_pdbx( $pdbx, { 'tags' => [ '_[local]_dihedral_angle' ] } );
    } elsif( $output_format eq 'csv' ) {
        to_csv( $pdbx, { 'category' => '_[local]_dihedral_angle' } );
    } else {
        error(
            { 'program' => $0,
              'message' => "output format '${output_format}'" .
                           " is not supported.\n" } );
    }
}
