#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use List::MoreUtils qw( uniq );

use LinearAlgebra qw( pi );
use PDBxParser qw( filter
                   obtain_atom_site
                   to_pdbx );
use PseudoAtoms qw( generate_library
                    library_to_csv );
use Grammar::CommandLineParser;

#*nr-generate
#*    generates rotamer library.
#*
#*USAGE:
#*    nr-generate -i input.cif > output.cif
#*
#*OPTIONS:
#*    --input <file> | <stdin>
#*        PDBx file.
#*    --select  <str>
#*        command describing the selection of atoms of interest.
#*        Selection keywords (equivalent PDBx category data items in parentheses):
#*            resid - residue id number (_atom_site.label_seq_id);
#*            resname - residue name    (_atom_site.label_comp_id);
#*            atoid - atom id number    (_atom_site.id);
#*            atoname - atom name       (_atom_site.label_atom_id);
#*            atotype - atom symbol     (_atom_site.type_symbol).
#*        Logical operators:
#*            & - and operator;
#*            | - or operator;
#*            ! - negation operator;
#*            () - parentheses.
#*    --compare-to <str>
#*        command (same as --select) describing the atoms where potential
#*        energies are calculated against with residues of interest.
#*    --model <str> (default: rotation_only)
#*        rules (model) that will be used to move side-chains.
#*    --angle-step <float> (default: 0.1) (in radians)
#*        angle that each dihedral angle is turned by.
#*    --potential (default: leonard_jones | hard_sphere | soft_sphere |
#*                 exponential | combined)
#*        uses potential energy function for determining interactions between
#*        selected residues and atoms that are reachable or described.
#*    --cutoff <float> (default: 0.4)
#*        the maximum value of energy potential that allows for further rotamer
#*        search.
#*    --out-fmt (default: csv)
#*        output format.
#*    --version
#*        prints out version.
#*    --help
#*        prints out help message.

# --------------------------------- Options ----------------------------------- #

my %options;

my $version = "1.0.0";

GetOptions(
    "input=s" => \$options{"pdbx_file"},
    "select=s" => \$options{"select_cl"},
    "compare-to=s" => \$options{"compare_to_cl"},
    "model=s" => \$options{"conf_model"},
    "potential=s" => \$options{"interactions"},
    "angle-step=s" => \$options{"small_angle"},
    "cutoff=s" => \$options{"cutoff"},
    "out-fmt=s" => \$options{"out_format"},
    "help" => sub { open( my $fh, "<", $0 );
		    while( <$fh> ) {
			my ( $help_message ) = $_ =~ m/^#(\*.*)/;
			$help_message =~ s/^\*$/ /g if $help_message;
			$help_message =~ s/^\*//g if $help_message;
			print( $help_message, "\n" ) if $help_message; }
		    close( $fh );
		    exit; },
    "version" => sub { print $version, "\n";
		       exit; } )
    or die "Error in command line argument.";

# Default options. # TODO: should make defaults according to selected potentials.
$options{"conf_model"} = "rotation_only" unless $options{"conf_model"};
$options{"interactions"} = "leonard_jones" unless $options{"interactions"};
$options{"small_angle"} = 0.1 unless $options{"small_angle"};
$options{"cutoff"} = 0.4 unless $options{"cutoff"};
$options{"out_format"} = "csv_degrees" unless $options{"out_format"};

# ----------------------------------- Main ------------------------------------ #

# Reads file path, stdin and "-" operator.
my $atom_site;
if( $options{"pdbx_file"} ) {
    $atom_site = obtain_atom_site( $options{"pdbx_file"} );
} elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
    $atom_site = obtain_atom_site( '-' );
} else {
    die( "Use command \"nr-generate --help\" in order to see the manual.\n" );
}

# Parses command line arguments to select certain atoms in PDBx.
my $command_line_parser = new CommandLineParser();
my @residue_ids =
    uniq(
 @{ filter( { "atom_site" => $command_line_parser->parser( $atom_site,
							   $options{"select_cl"},
							   "label_seq_id" ),
	      "data" => [ "label_seq_id" ],
	      "is_list" => 1 } ) } );

my %active_atom_site; # Active means that it will be used in calculations.
if( defined $options{"compare_to_cl"} ) {
    %active_atom_site =
	( %{ filter( { "atom_site" => $atom_site,
		       "include" => { "label_seq_id" => \@residue_ids } } ) },
	  %{ $command_line_parser->parser( $atom_site,
					   $options{"compare_to_cl"},
					   "id" ) } );
} else {
    %active_atom_site = %{ $atom_site };
}

# Starts generating rotamer library.
my $rotamer_library =
    generate_library( { "atom_site" => \%active_atom_site,
			"residue_ids" => \@residue_ids,
			"small_angle" => $options{"small_angle"} * pi(),
			"conf_model" => $options{"conf_model"},
			"interactions" => $options{"interactions"},
			"cutoff" => $options{"cutoff"} } );

# Outputs results to STDOUT.
if( $options{"out_format"} eq "csv_degrees" ) {
    library_to_csv( $rotamer_library, "degrees" );
}
