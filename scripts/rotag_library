#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
use List::Util qw( any
                   uniq );
use Try::Tiny;

use ForceField::Parameters;
use Logging qw( error
                warning );
use PDBxParser qw( obtain_pdbx_data
                   raw2indexed
                   split_by
                   to_csv
                   to_pdbx );
use Version qw( $VERSION );

Getopt::Long::Configure qw( gnu_getopt );

our $VERSION = $VERSION;

#*rotag_library [options] [--] <cif-file>...
#*    generate rotamer library.
#*
#*Usage:
#*    rotag_library --top-rank 5 input.cif > output.cif
#*    rotag_library --top-ratio 0.2 input.cif > output.cif
#*
#*Options:
#*    -t, --top-rank <int>
#*                        top rotamers according to the value of energies.
#*    -T, --top-ratio <float>
#*                        top rotamers according to the value of energies
#*                        [default: 1.0].
#*    -M, --min-max-ratio <float>
#*                        ratio of the lowest energies in the range of min/max
#*                        energy values.
#*    -u, --unique-angles-only
#*                        keeps only those residue angles that are unique.
#*    --tags <tag>[,<tag>...]
#*                        output only specified PDBx tags
#*                        (default: '_atom_site,_[local]_rotamer_angle').
#*    -F, --format <format>
#*                        output format. Only one category can be present if csv
#*                        is select (default: pdbx | csv).
#*    -v, --version
#*                        print version.

# --------------------------------- Options ----------------------------------- #

my $top_rank;
my $top_ratio;
my $min_max_ratio;
my $only_unique_angles = 0;
my $tags = '_atom_site,_[local]_rotamer_bond_parameter';
my $output_format = 'pdbx';
my @category_list = ( '_atom_site', '_[local]_rotamer_bond_parameter',
                      '_[local]_rotamer_energy', '_struct_conn' );

local $SIG{__WARN__} = sub {
    warning( { 'program' => $0,
               'message' => @_,
               'filename' => join( ', ', @ARGV ) } );
};

local $SIG{__DIE__} = sub {
    error( { 'program' => $0,
             'message' => @_,
             'filename' => join( ', ', @ARGV ) } );
};

GetOptions(
    'top-rank|t=s' => \$top_rank,
    'top-ratio|T=s' => \$top_ratio,
    'min-max-ratio|M=s' => \$min_max_ratio,
    'unique-angles-only|u' => sub { $only_unique_angles = 1 },
    'tags=s' => \$tags,
    'format|F=s' => \$output_format,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {
                                $help_message =~ s/^\*$/ /smgx;
                                $help_message =~ s/^\*//smgx;
                                print $help_message, "\n";
                            }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or error( { 'program' => $0,
              'message' => "mistake in command line argument.\n" } );

# Parses tag string.
$tags =~ s/\s//g;
my @tags = split /,/sxm, $tags;

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};
my $sig_figs_max = $parameters->{'_[local]_constants'}{'sig_figs_max'};

for my $pdbx_file ( @ARGV ) {
    my $pdbx = obtain_pdbx_data( $pdbx_file, \@category_list );

    if( ! exists $pdbx->{'_atom_site'} ||
        ! exists $pdbx->{'_[local]_rotamer_bond_parameter'} ||
        ! exists $pdbx->{'_[local]_rotamer_energy'} ) {
        warning( { 'program' => $0,
                   'message' => 'no atom sites, rotamer angles or energies ' .
                                "were detected.\n" } );
        next;
    }

    raw2indexed( $pdbx,
                 { 'attributes' =>
                       { '_atom_site' => [ 'id' ],
                         '_[local]_rotamer_bond_parameter' => [ 'id' ],
                         '_[local]_rotamer_energy' => [ 'rotamer_id' ],
                         '_struct_conn' => [ 'id' ] },
                   'read_until_end' => 1 } );

    my $atom_site = $pdbx->{'_atom_site'}{'data'};
    my $rotamer_angles = $pdbx->{'_[local]_rotamer_bond_parameter'}{'data'};
    my $rotamer_energy = $pdbx->{'_[local]_rotamer_energy'}{'data'};
    my $struct_conn = $pdbx->{'_struct_conn'}{'data'};

    # Generates a new collection of residue angles with defined frequencies.
    my $residue_angle_groups = split_by( { 'atom_site' => $rotamer_angles } );
    my $rotamer_angle_groups = split_by( { 'atom_site' => $rotamer_angles,
                                           'attributes' => [ 'rotamer_id' ] } );

    my @attributes =
        ( 'id', 'rotamer_id', 'label_seq_id', 'label_comp_id', 'label_asym_id',
          'pdbx_PDB_model_num', 'label_alt_id', 'frequency', 'type', 'value',
          'units' );

    my @rotamers;
    my %frequencies = ();
    for my $residue_unique_key ( sort keys %{ $residue_angle_groups } ) {
        my @angle_ids = @{ $residue_angle_groups->{$residue_unique_key} };
        my @rotamer_ids =
            uniq map { $rotamer_angles->{$_}{'rotamer_id'} } @angle_ids;

        my $current_top_rank;
        if( $top_rank ) {
            $current_top_rank =
                $top_rank <=
                scalar @rotamer_ids ? $top_rank : scalar @rotamer_ids;
        } elsif( $top_ratio ) {
            $current_top_rank = int( scalar( @rotamer_ids ) * $top_ratio );
            $current_top_rank = $current_top_rank == 0 ? 1 : $current_top_rank;
        } elsif( ! $min_max_ratio ) {
            push @rotamers, @rotamer_ids;
            next;
        }

        my @current_rotamers =
            sort { $rotamer_energy->{$a}{'value'} <=>
                   $rotamer_energy->{$b}{'value'} }
                 @rotamer_ids;

        if( $min_max_ratio ) {
            my $min_rotamer_id = $current_rotamers[0];
            my $max_rotamer_id = $current_rotamers[-1];
            my $min_max_energy_cutoff =
                $rotamer_energy->{$min_rotamer_id}{'value'} +
                ( $rotamer_energy->{$max_rotamer_id}{'value'} -
                  $rotamer_energy->{$min_rotamer_id}{'value'} ) * $min_max_ratio;
            @current_rotamers =
                grep { $rotamer_energy->{$_}{'value'} < $min_max_energy_cutoff }
                @current_rotamers;
        } else {
            @current_rotamers = @current_rotamers[0..$current_top_rank-1];
        }

        # Duplicated angles can appear when the terminal angles are removed, such
        # as terminal hydrogen in SER. The scan itself is very useful in order to
        # check the energy values, however, the final results usually does not
        # contain these angles.
        if( $only_unique_angles ) {
            my @unique_current_rotamers = ();
            my %visited_rotamers = ();
            for my $rotamer_id ( @current_rotamers ) {
                # HACK: should be adjusted so, the order would not matter.
                my $unique_angle_key =
                    join( ',', map { $rotamer_angles->{$_}{'type'} =>
                                     $rotamer_angles->{$_}{'value'} }
                          @{ $rotamer_angle_groups->{$rotamer_id} } );
                if( ! defined $visited_rotamers{$unique_angle_key} &&
                    ! $visited_rotamers{$unique_angle_key} ) {
                    $visited_rotamers{$unique_angle_key} = 1;
                    push @unique_current_rotamers, $rotamer_id;
                }
            }
            @current_rotamers = @unique_current_rotamers;
        }

        # TODO: frequency part will change in the future, because it can change
        # according to different strategies of calculations.
        for my $rotamer_id ( @current_rotamers ) {
            $frequencies{$rotamer_id} =
                sprintf( $sig_figs_max, 1 / scalar @current_rotamers );
        }

        push @rotamers, @current_rotamers;
    }

    my %pdbx_data;
    $pdbx_data{'_atom_site'} = $pdbx->{'_atom_site'};
    $pdbx_data{'_struct_conn'} = $pdbx->{'_struct_conn'};
    $pdbx_data{'_[local]_rotamer_bond_parameter'}{'metadata'}{'attributes'}=\@attributes;
    $pdbx_data{'_[local]_rotamer_bond_parameter'}{'metadata'}{'is_loop'} = 1;
    $pdbx_data{'_[local]_rotamer_bond_parameter'}{'metadata'}{'type'} = 'record';

    for my $angle_id ( sort { $a <=> $b } keys %{ $rotamer_angles } ) {
        my $rotamer_id = $rotamer_angles->{$angle_id}{'rotamer_id'};
        if( any { $rotamer_id eq $_ } @rotamers ) {
            # TODO: refactoring is needed, because there is a repeating code
            # snippet.
            my @rotamer_data = ();
            for my $attribute ( @attributes ) {
                if( exists $rotamer_angles->{$angle_id}{$attribute} ) {
                    push @rotamer_data, $rotamer_angles->{$angle_id}{$attribute};
                } else {
                    push @rotamer_data, '?';
                }
            }

            push @{ $pdbx_data{'_[local]_rotamer_bond_parameter'}{'data'} },
                { 'id' => $rotamer_data[0],
                  'rotamer_id' => $rotamer_data[1],
                  'label_seq_id' => $rotamer_data[2],
                  'label_comp_id' => $rotamer_data[3],
                  'label_asym_id' => $rotamer_data[4],
                  'pdbx_PDB_model_num' => $rotamer_data[5],
                  'label_alt_id' => $rotamer_data[6],
                  'frequency' => $frequencies{$rotamer_id},
                  'type' => $rotamer_data[8],
                  'value' => $rotamer_data[9],
                  'units' => $rotamer_data[10] };
        }
    }

    if( $output_format eq 'pdbx' ) {
        to_pdbx( \%pdbx_data,
                 { 'add_attributes' =>
                       { '_atom_site' => [ '[local]_selection_state' ] },
                   'tags' => [ @tags,
                               ( defined $struct_conn ?
                                 ( '_struct_conn' ) : () ) ] } );
    } elsif( $output_format eq 'csv' ) {
        if( scalar @tags == 1 ) {
            to_csv( \%pdbx_data, { 'category' => $tags[0] } );
        } else {
            warning( { 'program' => $0,
                       'message' => "only one tag has to be chosen for " .
                                    "CSV format.\n" } );
            exit;
        }
    } else {
        error(
            { 'program' => $0,
              'message' => "output format '${output_format}' is not " .
                           "supported.\n" } );
    }
}
