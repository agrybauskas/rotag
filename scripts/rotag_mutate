#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
Getopt::Long::Configure qw( gnu_getopt );

use PDBxParser qw( filter
                   obtain_atom_site );
use Version qw( $VERSION );

our $VERSION = $VERSION;

#*rotag_mutate [options] file1 [file2, ...]
#*    replace side-chain with specified moiety. Groups are needed to be specified
#*    with rotag_select.
#*
#*USAGE:
#*    rotag_mutate -m 'Arg' input.cif > output.cif
#*    rotag_mutate -m 'Ala; Lys' input.cif > output.cif
#*
#*OPTIONS:
#*    -m, --mutate <str>
#*        replaces selected side-chain with specified moiety.
#*    -i, --isomer (default: R | L)
#*        isomer that the moiety should be placed accordingly.
#*    -v, --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

GetOptions(
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {$help_message =~ s/^\*$/ /smgx;}
                            if( $help_message ) { $help_message =~ s/^\*//smgx; }
                            if( $help_message ) { print $help_message, "\n"; }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or die 'Error in command line argument.';

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

for my $pdbx_file ( @ARGV ) {
    # Reads file path, stdin and '-' operator.
    my $atom_site;
    if( $pdbx_file ) {
        $atom_site = obtain_atom_site( $pdbx_file );
    } else {
        die "Use command \"rotag_mutate --help\" in order to see the manual.\n";
    }

    my $selected_atom_site =
        filter( { 'atom_site' => $atom_site,
                  'include' => { '[local]_selection_state' => [ 'T', 'S' ] } } );
    my $target_atom_ids =
        filter( { 'atom_site' => $selected_atom_site,
                  'include' => { '[local]_selection_state' => [ 'T' ] },
                  'data' => [ 'id' ],
                  'is_list' => 1 } );
}
