#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
use List::MoreUtils qw( uniq );
use Try::Tiny;

use ForceField::Parameters;
use Logging qw( error
                warning );
use Moieties qw( replace_with_moiety );
use PDBxParser qw( filter
                   obtain_atom_site
                   to_pdbx
                   unique_residue_key );
use Version qw( $VERSION );

our $VERSION = $VERSION;

Getopt::Long::Configure qw( gnu_getopt );

#*rotag_mutate [options] -m <str> <file>...
#*    replace side-chain with specified moiety. Groups are needed to be specified
#*    with rotag_select.
#*
#*Usage:
#*    rotag_mutate -m 'ARG' input.cif > output.cif
#*    rotag_mutate -m '1:ALA; 2:Lys' input.cif > output.cif
#*    rotag_mutate -m '1:ASP, chi1=120, chi2=60' input.cif > output.cif
#*    rotag_mutate -m '3:ALA; 5:SER, chi1=134.0' input.cif > output.cif
#*    rotag_mutate -m 'SEC' -M moiety.cif input.cif > output.cif
#*
#*Options:
#*    -m, --mutate <str>         replaces selected side-chain with specified
#*                               moiety.
#*
#*                               E.g.: 'VAL', '2:VAL; 3:SER', 'SER, chi1=0.0',
#*                               '1:ASP, chi1=0.0, chi2=150.0; 2:SER'.
#*
#*    -M, --import-moiety <file> use defined PDBx file where moiety atom site
#*                               details are described.
#*
#*    -r, --radians              radians are used in --angles argument.
#*
#*    -v, --version              print version.

# --------------------------------- Options ----------------------------------- #

my $mutations = '';
my $moiety_file='';
my $in_radians = 0;

local $SIG{__WARN__} = sub {
    warning( { 'program' => $0, 'message' => @_ } );
};

local $SIG{__DIE__} = sub {
    error( { 'program' => $0, 'message' => @_ } );
};

GetOptions(
    'mutate|m=s' => \$mutations,
    'import-moiety|M=s' => \$moiety_file,
    'radians|r=s' => sub { $in_radians = 1; },
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {$help_message =~ s/^\*$/ /smgx;}
                            if( $help_message ) { $help_message =~ s/^\*//smgx; }
                            if( $help_message ) { print $help_message, "\n"; }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or error( { 'program' => $0,
              'message' => "mistake in command line argument.\n" } );

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};

# Parsing mutation string.
my @mutations;
$mutations =~ s/\s//smxg;
@mutations = split q{;}, $mutations;

for( my $i = 0; $i <= $#mutations; $i++ ) {
    my $statement = $mutations[$i];

    my $group_id;
    if( $statement =~ s/^(\w+)\:// ) {
        $group_id = $1;
    }

    my $moiety;
    my %angles = ();
    foreach( split /,/, $statement ) {
        if( $_ =~ m/^\w+=[-]?[0-9]+\.?[0-9]?$/ ) {
            if( $in_radians ) {
                my ( $angle_name, $angle_value ) = split /=/, $_;
                $angles{$angle_name} = $angle_value;
            } else {
                my ( $angle_name, $angle_value ) = split /=/, $_;
                $angles{$angle_name} = $angle_value * $pi / 180.0;
            }
        } elsif( $_ =~ m/^\w+$/ ) {
            if( defined $moiety ) {
                error({'message' =>
                           "cannot mutate into multiple moieties: $moiety, $_"});
            }

            $moiety = $_;
        }
    }

    $mutations[$i] = {
        'group_id' => $group_id,
        'moiety' => $moiety,
        'angles' => \%angles,
    };
}

for my $pdbx_file ( @ARGV ) {
    # Reads file path, stdin and '-' operator.
    my $atom_site;
    $atom_site = obtain_atom_site( $pdbx_file );

    next if ! %{ $atom_site };

    my %append_moieties = ();
    if( $moiety_file ) {
        my $moiety_site = obtain_atom_site( $moiety_file );
        for my $atom_id ( keys %{ $moiety_site } ) {
            my $residue_name = $moiety_site->{$atom_id}{'label_comp_id'};
            $append_moieties{$residue_name}{$atom_id} = $moiety_site->{$atom_id};
        }
    }

    my $selected_atom_site =
        filter( { 'atom_site' => $atom_site,
                  'include' => { '[local]_selection_state' => [ 'T' ] },
                  'exclude' => { '[local]_selection_group' => [ q{?} ] } } );
    my @group_ids =
        uniq( @{ filter( { 'atom_site' => $selected_atom_site,
                           'data' => [ '[local]_selection_group' ],
                           'is_list' => 1 } ) } );

    if( ! @group_ids ) {
        error( { 'program' => $0,
                 'filename' => $pdbx_file,
                 'message' =>
                     "no residues were selected. Use " .
                     "rotag_select script to select residue(-s).\n" } );
    }

    if( @mutations ) {
        for( my $i = 0; $i <= $#mutations; $i++ ) {
            my $ca_atom_id =
                filter( { 'atom_site' => $selected_atom_site,
                          'include' =>
                              { 'label_atom_id' => [ 'CA' ],
                                '[local]_selection_group' =>
                                    [ $mutations[$i]{'group_id'} ] },
                          'data' => [ 'id' ],
                          'is_list' => 1 } )->[0];
            my $unique_residue_key =
                unique_residue_key( $selected_atom_site->{$ca_atom_id} );

            replace_with_moiety( $parameters,
                                 $selected_atom_site,
                                 $unique_residue_key,
                                 $mutations[$i]{'moiety'},
                                 { 'angles' => $mutations[$i]{'angles'},
                                   'append_moieties' => \%append_moieties } );

            to_pdbx( { 'atom_site' => $selected_atom_site } );
        }
    } else {
        error( { 'program' => $0,
                 'filename' => $pdbx_file,
                 'message' => "no mutations were specified. Use -m " .
                              "option to achieve that.\n" } );
    }
}
