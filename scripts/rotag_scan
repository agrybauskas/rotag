#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
use List::MoreUtils qw( uniq );
use List::Util qw( any );
use Try::Tiny;

use ForceField::Parameters;
use Logging qw( error
                warning );
use PDBxParser qw( determine_residue_keys
                   filter
                   mark_selection
                   obtain_atom_site
                   split_by
                   pdbx_loop_to_csv
                   to_pdbx );
use PseudoAtoms qw( generate_library );
use Sampling qw( sample_angles_qs_parsing );
use Version qw( $VERSION );

Getopt::Long::Configure qw( gnu_getopt );

our $VERSION = $VERSION;

#*rotag_scan [options] <file>...
#*    scan for rotamer conformations.
#*
#*Usage:
#*    rotag_scan -u composite input.cif > output.cif
#*    rotag_scan -c 0.005 input.cif > output.cif
#*    rotag_scan -c 0.005 -p 'lj_k=1.05, c_k=0.4' input.cif > output.cif
#*
#*Options:
#*    -u, --potential <potential> uses potential energy function for determining
#*                                interactions between selected residues and
#*                                atoms that are reachable or described
#*                                (default: composite | hard_sphere
#*                                | soft_sphere).
#*
#*    -p, --parameters <str>      parameter values.
#*
#*                                Parameters for composite potential energy
#*                                function:
#*                                    lj_k         - Leonard-Jones constant;
#*                                    c_k          - Coulomb constant;
#*                                    h_k          - hydrogen bond constant;
#*                                    cutoff_start - x VdW where energy starts
#*                                                   to go to zero;
#*                                    cutoff_end   - x VdW where energy is at
#*                                                   zero.
#*
#*                                Parameters for soft-sphere potential energy
#*                                function:
#*                                    soft_epsilon - soft sphere epsilon;
#*                                    soft_n       - soft sphere n.
#*
#*                                E.g.: -p 'lj_k=0.01, c_k=0.4'.
#*
#*    -a, --angles <str>          angles that each dihedral angle is turned
#*                                by in degrees expressed in special grammar:
#*                                    <float>..<float>..<float>
#*                                        - defined steps that are performed by
#*                                          defined range;
#*                                    <angle> = <float>...[,...]
#*                                        - defined steps that are performed by
#*                                          defined range for specific angle;
#*
#*                                E.g.: '0..36.0..360.0', '0..18.0..180.0',
#*                                      '0..90.0', 'chi1=0..36.0',
#*                                      'chi1=90.0..90.0, chi2=0.0..10.0..360.0'.
#*
#*    -r, --radians               angle value is in radians.
#*
#*    -c, --cutoff-atom <float>   the maximum value of energy potential for each
#*                                atom that allows for further rotamer search
#*                                (default: 0.4).
#*
#*    --tags <tag>[,<tag>...]     output only specified PDBx tags.
#*
#*    -n, --threads <int>         number of threads.
#*
#*    -v, --version               print version.

# --------------------------------- Options ----------------------------------- #

my $interactions = 'composite';
my $angles = '-180.0..36.0..180.0';
my $in_radians = 0;
my $energy_cutoff_atom;
my $threads = 1;
my $tags = '';
my $parameters = '';

my @warnings;
local $SIG{__WARN__} = sub {
    push @warnings, @_;
};

my @errors;
local $SIG{__DIE__} = sub {
    push @errors, @_;
};

GetOptions(
    'potential|u=s' => \$interactions,
    'parameters|p=s' => \$parameters,
    'angles|a=s' => \$angles,
    'radians|r' => sub { $in_radians = 1 },
    'cutoff-atom|c=s' => \$energy_cutoff_atom,
    'tags=s' => \$tags,
    'threads|n=s' => \$threads,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {$help_message =~ s/^\*$/ /smgx;}
                            if( $help_message ) { $help_message =~ s/^\*//smgx; }
                            if( $help_message ) { print $help_message, "\n"; }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or error( { 'program' => $0,
              'message' => "mistake in command line argument.\n" } );

# Parses tag string.
$tags =~ s/\s//g;
$tags = [
    split /,/sxm, $tags
];

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

try {

my $PARAMETERS = Parameters->new();
my $PI = $PARAMETERS->{'_[local]_constants'}{'pi'};
my $SIG_FIGS_MAX = $PARAMETERS->{'_[local]_constants'}{'sig_figs_max'};

# Parses string describing angles.
my %angles = %{ sample_angles_qs_parsing( $angles, undef, undef, $PARAMETERS ) };

# Parses parameter string.
$parameters =~ s/\s//g;
for my $parameter_pair ( split /,/sxm, $parameters ) {
    my ( $parameter, $value ) = split /=/sm, $parameter_pair;
    $PARAMETERS->set_parameter_values(
        { '_[local]_force_field' => { $parameter => $value } }
    );
}

for my $pdbx_file ( @ARGV ) {
    # Reads file path, stdin and '-' operator.
    my $atom_site;
    $atom_site = obtain_atom_site( $pdbx_file );

    if( ! %{ $atom_site } ) {
        warning( { 'message' => "$pdbx_file is empty.\n" } );
        exit;
    }

    my $selected_atom_site =
        filter( { 'atom_site' => $atom_site,
                  'include' => { '[local]_selection_state' => [ 'T', 'S' ] } } );

    # Selects all atoms if no specific atoms are selected.
    if( ! %{ $selected_atom_site } ) {
        $selected_atom_site = $atom_site;
        mark_selection( $selected_atom_site,
                        { 'target' => [ keys %{ $selected_atom_site } ] } );
    }

    # Splits atom site into groups by its uniqueness.
    my $atom_site_groups = split_by( { 'atom_site' => $selected_atom_site,
                                       'attributes' => [ 'pdbx_PDB_model_num',
                                                         'label_alt_id' ],
                                       'append_dot' => 1 } );

    my %rotamer_library;
    for my $atom_site_identifier ( sort keys %{ $atom_site_groups } ) {
        my $current_atom_site =
            filter( { 'atom_site' => $atom_site,
                      'include' =>
                          { 'id' =>
                                $atom_site_groups->{$atom_site_identifier} } } );
        my $current_target_site =
            filter( { 'atom_site' => $current_atom_site,
                      'include' => { '[local]_selection_state' => [ 'T' ] } } );

        my $residue_unique_keys =
            determine_residue_keys( $current_target_site,
                                    { 'exclude_dot' => 1 } );

        # Starts generating rotamer library.
        my $rotamer_library;
        eval {
            $rotamer_library =
                generate_library(
                    { 'atom_site' => $current_atom_site,
                      'residue_unique_keys' => $residue_unique_keys,
                      'include_interactions' =>
                          { 'id' => [ keys %{ $current_atom_site } ] },
                      'angles' => \%angles,
                      'interactions' => $interactions,
                      'PARAMETERS' => $PARAMETERS,
                      'threads' => $threads,
                    } );
        };
        if( $@ ) {
            warning( { 'message' => $@ } );
            exit;
        }

        for my $residue_unique_key ( keys %{ $rotamer_library } ) {
            $rotamer_library{$residue_unique_key} =
                $rotamer_library->{$residue_unique_key};
        }
    }

    # Collects residue angle and energy data.
    my %pdbx_loops;

    $pdbx_loops{'_[local]_rotamer_angle'}{'attributes'} =
        [ 'id', 'rotamer_id', 'label_seq_id', 'label_comp_id', 'label_asym_id',
          'pdbx_PDB_model_num', 'label_alt_id', 'type', 'value' ];
    $pdbx_loops{'_[local]_rotamer_energy'}{'attributes'} =
        [ 'id', 'rotamer_id', 'calculation_method', 'value'];

    my $angle_id = 1;
    my $energy_id = 1;
    my $rotamer_id = 1;
    for my $residue_unique_key ( sort { $a cmp $b } keys %rotamer_library ){
        my ( $residue_id, $residue_chain, $pdbx_model, $residue_alt ) =
            split /,/sxm, $residue_unique_key;
        my @residue_name =
            uniq( @{ filter( { 'atom_site' => $selected_atom_site,
                               'include' =>
                                   { 'label_seq_id' => [ $residue_id ],
                                     'label_asym_id' => [ $residue_chain ],
                                     'label_alt_id' => [ $residue_alt ],
                                     'pdbx_PDB_model_num' => [ $pdbx_model ] },
                               'data' => [ 'label_comp_id' ],
                               'is_list' => 1 } ) } );

        for my $rotamer ( @{ $rotamer_library{$residue_unique_key} } ) {
            # Colects rotamer angle data.
            for my $angle_name (sort { $a cmp $b } keys %{$rotamer->{'angles'}}){
                my $angle_value = $rotamer->{'angles'}{$angle_name};
                push @{ $pdbx_loops{'_[local]_rotamer_angle'}{'data'} },
                     $angle_id, $rotamer_id, $residue_id, $residue_name[0],
                     $residue_chain, $pdbx_model, $residue_alt, $angle_name,
                     sprintf $SIG_FIGS_MAX, $angle_value;
                $angle_id++;
            }

            # Colects rotamer energy data.
            push @{ $pdbx_loops{'_[local]_rotamer_energy'}{'data'} },
                 $energy_id, $rotamer_id, $rotamer->{'potential'},
                 sprintf $SIG_FIGS_MAX, $rotamer->{'potential_energy_value'};

            $energy_id++;
            $rotamer_id++;
        }
    }

    if( @{ $tags } ) {
        # TODO: quick fix, but should be standardized. How to handle atom site?
        # Maybe after the data structure unification this problem will be solved,
        # because now it is quite messy.
        to_pdbx({ ( ( any { $_ eq '_atom_site' } @{ $tags } ) ?
                    ( 'atom_site' => $selected_atom_site,
                      'add_atom_attributes' => [ '[local]_selection_state' ] ) :
                    () ),
                  'pdbx_loops' => { map { $_ => $pdbx_loops{$_} } @{ $tags } }});
    } else {
        to_pdbx( { 'atom_site' => $selected_atom_site,
                   'add_atom_attributes' => [ '[local]_selection_state' ],
                   'pdbx_loops' => \%pdbx_loops } );
    }
}

} catch {
    foreach( @warnings ) {
        warning( { 'message' => "$_" } );
    }
    foreach( @errors ) {
        error( { 'program' => $0, 'message' => "$_" } );
    }
};
