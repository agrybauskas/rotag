#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
use JSON;
use List::MoreUtils qw( uniq );
use List::Util qw( any );
use Try::Tiny;

use ForceField::Parameters;
use Logging qw( error
                warning );
use PDBxParser qw( determine_residue_keys
                   filter
                   mark_selection
                   obtain_pdbx_data
                   raw2indexed
                   split_by
                   to_csv
                   to_pdbx );
use CPP::PseudoAtoms qw( generate_library );
use Sampling qw( sample_angles_qs_parsing );
use Version qw( $VERSION );

Getopt::Long::Configure qw( gnu_getopt );

our $VERSION = $VERSION;

#*rotag_scan [options] [--] <cif-file>...
#*    scan for rotamer conformations.
#*
#*Usage:
#*    rotag_scan --potential composite input.cif > output.cif
#*    rotag_scan input.cif > output.cif
#*    rotag_scan --parameters 'cutoff_atom=0.5, lj_k=1.05' input.cif > output.cif
#*
#*Options:
#*    -u, --potential <potential>
#*                        uses potential energy function for determining
#*                        interactions between selected residues and atoms that
#*                        are reachable or described (default: composite |
#*                        hard_sphere | soft_sphere).
#*    -p, --parameters <parameter>=<float>[,<parameter>=<float>...]
#*                        parameter values.
#*
#*                        Parameters for composite potential energy
#*                        function:
#*                            lj_k         - Leonard-Jones constant;
#*                            c_k          - Coulomb constant;
#*                            h_k          - hydrogen bond constant;
#*                            cutoff_atom  - largest possible energy
#*                                           value for the atom;
#*                            cutoff_start - x VdW where energy starts
#*                                           to go to zero;
#*                            cutoff_end   - x VdW where energy is at
#*                                           zero.
#*
#*                        Parameters for soft-sphere potential energy
#*                        function:
#*                            soft_epsilon - soft sphere epsilon;
#*                            soft_n       - soft sphere n.
#*
#*                        Example: 'lj_k=0.01, c_k=0.4'.
#*    -a, --angles <angles>
#*                        angles that each dihedral angle is turned by in degrees
#*                        expressed in special grammar:
#*                            <float>..<float>..<float>
#*                                defined steps that are performed by
#*                                defined range;
#*                            <angle> = <float>[,<float>...]
#*                                defined steps that are performed by
#*                                defined range for specific angle;
#*
#*                        Example: '0..36.0..360.0', '0..18.0..180.0',
#*                                 '0..90.0', 'chi1=0..36.0',
#*                                 'chi1=90.0..90.0, chi2=0.0..10.0..360.0'.
#*    -r, --radians
#*                        angle value is in radians.
#*    -x, --rand-seed <int>
#*                        set a seed for random angle selection.
#*    -X, --rand-count <int>
#*                        number of random angles.
#*    --tags <tag>[,<tag>...]
#*                        output only specified PDBx categories.
#*    -F, --format <format>
#*                        output format. Only one category can be present if csv
#*                        is select (default: pdbx | csv).
#    -n, --threads <int>
#                        number of threads.
#*    -v, --version
#*                        print version.

# --------------------------------- Options ----------------------------------- #

my $interactions = 'composite';
my $angles = '-180.0..36.0..180.0';
my $in_radians = 0;
my $rand_seed;
my $rand_count;
my $threads = 1;
my $tags = '_atom_site,_[local]_rotamer_angle,_[local]_rotamer_energy';
my $output_format = 'pdbx';
my $parameters_cmd = '';
my $parameters_json_cmd = '{}';
my @category_list = ( '_atom_site' );

local $SIG{__WARN__} = sub {
    warning( { 'program' => $0,
               'message' => @_,
               'filename' => join( ', ', @ARGV ) } );
};

local $SIG{__DIE__} = sub {
    error( { 'program' => $0,
             'message' => @_,
             'filename' => join( ', ', @ARGV ) } );
};

GetOptions(
    'potential|u=s' => \$interactions,
    'parameters|p=s' => \$parameters_cmd,
    'json-parameters|j=s' => \$parameters_json_cmd,
    'angles|a=s' => \$angles,
    'rand-seed|x=s' => \$rand_seed,
    'rand-count|X=s' => \$rand_count,
    'radians|r' => sub { $in_radians = 1 },
    'tags=s' => \$tags,
    'format|F=s' => \$output_format,
    'threads|n=s' => \$threads,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {
                                $help_message =~ s/^\*$/ /smgx;
                                $help_message =~ s/^\*//smgx;
                                print $help_message, "\n";
                            }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or error( { 'program' => $0,
              'message' => "mistake in command line argument.\n" } );

# Parses tag string.
$tags =~ s/\s//g;
my @tags = split /,/sxm, $tags;

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

my $parameters = Parameters->new();
my $pi = $parameters->{'_[local]_constants'}{'pi'};
my $sig_figs_min = $parameters->{'_[local]_constants'}{'sig_figs_min'};
my $sig_figs_max = $parameters->{'_[local]_constants'}{'sig_figs_max'};

# Set random seed.
if( defined $rand_seed ) {
    srand( $rand_seed );
}

# Parses string describing angles.
my %angles = %{ sample_angles_qs_parsing( $parameters, $angles ) };

# Parses parameter string.
$parameters_cmd =~ s/\s//g;
for my $parameter_pair ( split /,/sxm, $parameters_cmd ) {
    my ( $parameter, $value ) = split /=/sm, $parameter_pair;
    $parameters->set_parameter_values(
        \$parameters, { '_[local]_force_field' => { $parameter => $value } }
    );
}

# Parses JSON string.
$parameters->set_parameter_values( \$parameters,
                                   decode_json( $parameters_json_cmd ),
                                   { 'is_json' => 1 } );

for my $pdbx_file ( @ARGV ) {
    my $pdbx_data = obtain_pdbx_data( $pdbx_file, \@category_list );

    if( ! defined $pdbx_data->{'_atom_site'}{'data'} ) {
        warning( { 'program' => $0,
                   'message' => "no atom sites were detected.\n" } );
        next;
    }

    raw2indexed( $pdbx_data,
                 { 'attributes' => { '_atom_site' => [ 'id' ] } } );

    my $atom_site = $pdbx_data->{'_atom_site'}{'data'};

    my $selected_atom_site =
        filter( { 'atom_site' => $atom_site,
                  'include' => { '[local]_selection_state' => [ 'T', 'S' ] } } );

    # Selects all atoms if no specific atoms are selected.
    if( ! %{ $selected_atom_site } ) {
        $selected_atom_site = $atom_site;
        mark_selection( $selected_atom_site,
                        { 'target' => [ keys %{ $selected_atom_site } ] } );
    }

    # Splits atom site into groups by its uniqueness.
    my $atom_site_groups = split_by( { 'atom_site' => $selected_atom_site,
                                       'attributes' => [ 'label_asym_id',
                                                         'pdbx_PDB_model_num',
                                                         'label_alt_id' ],
                                       'append_dot' => 1 } );

    my %rotamer_library;
    for my $atom_site_identifier ( sort keys %{ $atom_site_groups } ) {
        my $current_atom_site =
            filter( { 'atom_site' => $atom_site,
                      'include' =>
                          { 'id' =>
                                $atom_site_groups->{$atom_site_identifier} } } );
        my $current_target_site =
            filter( { 'atom_site' => $current_atom_site,
                      'include' => { '[local]_selection_state' => [ 'T' ] } } );

        my $residue_unique_keys =
            determine_residue_keys( $current_target_site,
                                    { 'exclude_dot' => 1 } );

        # Starts generating rotamer library.
        # PseudoAtomsc::generate_library()
        # my $rotamer_library =
        #     generate_library(
        #         { 'parameters' => $parameters,
        #           'atom_site' => $current_atom_site,
        #           'residue_unique_keys' => $residue_unique_keys,
        #           'include_interactions' =>
        #               { 'id' => [ keys %{ $current_atom_site } ] },
        #           'angles' => \%angles,
        #           'interactions' => $interactions,
        #           'threads' => $threads,
        #           'options' => { 'rand_seed' => $rand_seed,
        #                          'rand_count' => $rand_count }
        #         } );

        # for my $residue_unique_key ( keys %{ $rotamer_library } ) {
        #     $rotamer_library{$residue_unique_key} =
        #         $rotamer_library->{$residue_unique_key};
        # }
    }

    # if( ! %rotamer_library ) {
    #     warning({'message' => "no possible rotamer solutions were detected.\n"});
    #     exit;
    # }

    # # Collects residue angle and energy data.
    # $pdbx_data->{'_[local]_rotamer_angle'}{'metadata'}{'attributes'} =
    #     [ 'id', 'rotamer_id', 'label_seq_id', 'label_comp_id', 'label_asym_id',
    #       'pdbx_PDB_model_num', 'label_alt_id', 'frequency', 'type', 'value',
    #       'units' ];
    # $pdbx_data->{'_[local]_rotamer_energy'}{'metadata'}{'attributes'} =
    #     [ 'id', 'rotamer_id', 'calculation_method', 'value'];
    # $pdbx_data->{'_[local]_rotamer_angle'}{'metadata'}{'is_loop'} = 1;
    # $pdbx_data->{'_[local]_rotamer_energy'}{'metadata'}{'is_loop'} = 1;
    # $pdbx_data->{'_[local]_rotamer_angle'}{'metadata'}{'type'} = 'record';
    # $pdbx_data->{'_[local]_rotamer_energy'}{'metadata'}{'type'} = 'record';

    # my $angle_id = 1;
    # my $energy_id = 1;
    # my $rotamer_id = 1;
    # for my $residue_unique_key ( sort { $a cmp $b } keys %rotamer_library ){
    #     my ( $residue_id, $residue_chain, $pdbx_model, $residue_alt ) =
    #         split /,/sxm, $residue_unique_key;
    #     my @residue_name =
    #         uniq( @{ filter( { 'atom_site' => $selected_atom_site,
    #                            'include' =>
    #                                { 'label_seq_id' => [ $residue_id ],
    #                                  'label_asym_id' => [ $residue_chain ],
    #                                  'label_alt_id' => [ $residue_alt ],
    #                                  'pdbx_PDB_model_num' => [ $pdbx_model ] },
    #                            'data' => [ 'label_comp_id' ],
    #                            'is_list' => 1 } ) } );

    #     my $rotamer_frequency =
    #         1 / scalar @{ $rotamer_library{$residue_unique_key} };

    #     for my $rotamer ( @{ $rotamer_library{$residue_unique_key} } ) {
    #         # Colects rotamer angle data.
    #         for my $angle_name (sort { $a cmp $b } keys %{$rotamer->{'angles'}}){
    #             my $angle_value = $rotamer->{'angles'}{$angle_name};
    #             push @{ $pdbx_data->{'_[local]_rotamer_angle'}{'data'} },
    #                 { 'id' => $angle_id,
    #                   'rotamer_id' => $rotamer_id,
    #                   'label_seq_id' => $residue_id,
    #                   'label_comp_id' => $residue_name[0],
    #                   'label_asym_id' => $residue_chain,
    #                   'pdbx_PDB_model_num' => $pdbx_model,
    #                   'label_alt_id' => $residue_alt,
    #                   'frequency' =>
    #                       sprintf( $sig_figs_max, $rotamer_frequency ),
    #                   'type' => $angle_name,
    #                   'value' =>
    #                       ( $in_radians ? sprintf( $sig_figs_max,
    #                                                $angle_value ) :
    #                                       sprintf( $sig_figs_min,
    #                                                180.0 * $angle_value / $pi )),
    #                   'units' =>
    #                       ( $in_radians ? 'radians' : 'degrees' ) };
    #             $angle_id++;
    #         }

    #         # Colects rotamer energy data.
    #         push @{ $pdbx_data->{'_[local]_rotamer_energy'}{'data'} },
    #             { 'id' => $energy_id,
    #               'rotamer_id' => $rotamer_id,
    #               'calculation_method' => $rotamer->{'potential'},
    #               'value' =>
    #                   sprintf $sig_figs_max,
    #                           $rotamer->{'potential_energy_value'} };

    #         $energy_id++;
    #         $rotamer_id++;
    #     }
    # }

    # if( $output_format eq 'pdbx' ) {
    #     to_pdbx( $pdbx_data,
    #              { 'add_attributes' =>
    #                    { '_atom_site' => [ '[local]_selection_state' ] },
    #                'tags' => \@tags } );
    # } elsif( $output_format eq 'csv' ) {
    #         if( scalar @tags == 1 ) {
    #             to_csv( $pdbx_data, { 'category' => $tags[0] } );
    #         } else {
    #             warning( { 'message' => "only one tag has to be chosen for " .
    #                                     "CSV format.\n" } );
    #             exit;
    #         }
    # } else {
    #     error(
    #         { 'program' => $0,
    #           'message' => "output format '${output_format}'" .
    #                        " is not supported.\n" } );
    # }
}
