#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use List::MoreUtils qw( uniq );

use LinearAlgebra qw( pi );
use Measure qw( all_dihedral
                dihedral_angle );
use PDBxParser qw( filter
                   obtain_atom_site
                   to_pdbx );

#*nr-dihedral
#*    calculates dihedral angles selected atoms or residues.
#*
#*USAGE:
#*    nr-dihedral --atoms --input input.cif > output.cif
#*    nr-dihedral --residues --input input.cif > output.cif
#*
#*OPTIONS:
#*    --input <file> | <stdin>
#*        PDBx file.
#*    --atoms
#*        calculates dihedral angle from the four coordinates of the selected
#*        atoms (nr-select should be used for residue selection).
#*    --residues
#*        calculates all dihedral angles of selected residue(-s)
#*        (nr-select should be used for residue selection).
#*    --degrees
#*        angles are in degrees (default ).
#*    --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

my %options;

my $version = "1.0.0";
my $atom_dihedral = 0;
my $residue_dihedral = 0;
my $in_degrees = 0;

GetOptions(
    "input=s" => \$options{"pdbx_file"},
    "atoms" => sub { $atom_dihedral = 1 },
    "residues" => sub { $residue_dihedral = 1 },
    "degrees" => sub { $in_degrees = 1 },
    "help" => sub { open( my $fh, "<", $0 );
		    while( <$fh> ) {
			my ( $help_message ) = $_ =~ m/^#(\*.*)/;
			$help_message =~ s/^\*$/ /g if $help_message;
			$help_message =~ s/^\*//g if $help_message;
			print( $help_message, "\n" ) if $help_message; }
		    close( $fh );
		    exit; },
    "version" => sub { print $version, "\n";
		       exit; } )
    or die "Error in command line argument.";

# ----------------------------------- Main ------------------------------------ #

# Reads file path, stdin and "-" operator.
my $atom_site;
if( $options{"pdbx_file"} ) {
    $atom_site = obtain_atom_site( $options{"pdbx_file"} );
} elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
    $atom_site = obtain_atom_site( '-' );
} else {
    die( "Use command \"nr-generate --help\" in order to see the manual.\n" );
}

# Calculates dihedral angles
my %pdbx_loops;

if( $atom_dihedral ) {
    $pdbx_loops{"_[local]_dihedral_angle"}{"attributes"} =
	[ "id", "first_atom_id", "second_atom_id", "third_atom_id",
	  "fourth_atom_id", "value" ];

    my $dihedral_site =
	filter( { "atom_site" => $atom_site,
		  "include" => { "[local]_selection_state" => [ "T" ] },
		  "exclude" => { "[local]_selection_order" => [ "?" ] } } );
    my @dihedral_atom_ids =
	sort { $dihedral_site->{"$a"}{"[local]_selection_order"}
	   <=> $dihedral_site->{"$b"}{"[local]_selection_order"} }
        keys %{ $dihedral_site };

    my $dihedral_id = 1;
    for( my $i = 0; $i <= $#dihedral_atom_ids; $i = $i + 4 ) {
    	my $first_atom_id = $dihedral_atom_ids[$i];
    	my $second_atom_id = $dihedral_atom_ids[$i+1];
    	my $third_atom_id = $dihedral_atom_ids[$i+2];
    	my $fourth_atom_id = $dihedral_atom_ids[$i+3];
	my $dihedral_angle =
	    dihedral_angle(
		[ [ $dihedral_site->{"$first_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$first_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$first_atom_id"}{"Cartn_z"} ],
		  [ $dihedral_site->{"$second_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$second_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$second_atom_id"}{"Cartn_z"} ],
		  [ $dihedral_site->{"$third_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$third_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$third_atom_id"}{"Cartn_z"} ],
		  [ $dihedral_site->{"$fourth_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$fourth_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$fourth_atom_id"}{"Cartn_z"} ] ] );

	push( @{ $pdbx_loops{"_[local]_dihedral_angle"}{"data"} },
	      $dihedral_id, $first_atom_id, $second_atom_id, $third_atom_id,
	      $fourth_atom_id,
	      ( $in_degrees ? sprintf( "%.3f", $dihedral_angle * 180 / pi() )
		            : sprintf( "%.3f", $dihedral_angle ) ) );
	$dihedral_id++;
    }

} elsif( $residue_dihedral ) {
    $pdbx_loops{"_[local]_dihedral_angle"}{"attributes"} =
	[ "id", "residue_id", "residue_type", "type", "value" ];

    my $dihedral_site =
	filter( { "atom_site" => $atom_site,
		  "include" => { "[local]_selection_state" => [ "T" ] } } );
    my $dihedral_angles = all_dihedral( $dihedral_site );

    my $dihedral_id = 1;
    for my $residue_id ( sort keys %{ $dihedral_angles } ) {
	my $residue_name = uniq( @{ filter( { "atom_site" => $dihedral_site,
					      "data" => [ "label_comp_id" ],
					      "is_list" => 1 } ) } );

	for my $angle_name ( sort keys %{ $dihedral_angles->{$residue_id} } ) {
	    push( @{ $pdbx_loops{"_[local]_dihedral_angle"}{"data"} },
		  $dihedral_id, $residue_id, $residue_name, $angle_name,
		  ( $in_degrees ? sprintf( "%.3f",
					   $dihedral_angles->
					       {$residue_id}{$angle_name}
					   * 180 / pi() )
		                : sprintf( "%.3f",
					   $dihedral_angles->
					       {$residue_id}{$angle_name} ) ) );
	    $dihedral_id++;
	}
    }
}

to_pdbx( { "pdbx_loops" => \%pdbx_loops } );
