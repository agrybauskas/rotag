#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

use LinearAlgebra qw( pi );
use Measure qw( all_dihedral
                dihedral_angle );
use PDBxParser qw( filter
                   obtain_atom_site );

#*nr-dihedral
#*    calculates dihedral angles selected atoms or residues.
#*
#*USAGE:
#*    nr-dihedral --atoms --input input.cif > output.cif
#*    nr-dihedral --residues --input input.cif > output.cif
#*
#*OPTIONS:
#*    --input <file> | <stdin>
#*        PDBx file.
#*    --atoms
#*        calculates dihedral angle from the four coordinates of the selected
#*        atoms (nr-select should be used for residue selection).
#*    --residues
#*        calculates all dihedral angles of selected residue(-s)
#*        (nr-select should be used for residue selection).
#*    --degrees
#*        angles are in degrees (default ).
#*    --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

my %options;

my $version = "1.0.0";
my $atom_dihedral = 0;
my $residue_dihedral = 0;
my $in_degrees = 0;

GetOptions(
    "input=s" => \$options{"pdbx_file"},
    "atoms" => sub { $atom_dihedral = 1 },
    "residues" => sub { $residue_dihedral = 1 },
    "degrees" => sub { $in_degrees = 1 },
    "help" => sub { open( my $fh, "<", $0 );
		    while( <$fh> ) {
			my ( $help_message ) = $_ =~ m/^#(\*.*)/;
			$help_message =~ s/^\*$/ /g if $help_message;
			$help_message =~ s/^\*//g if $help_message;
			print( $help_message, "\n" ) if $help_message; }
		    close( $fh );
		    exit; },
    "version" => sub { print $version, "\n";
		       exit; } )
    or die "Error in command line argument.";

# ----------------------------------- Main ------------------------------------ #

# Reads file path, stdin and "-" operator.
my $atom_site;
if( $options{"pdbx_file"} ) {
    $atom_site = obtain_atom_site( $options{"pdbx_file"} );
} elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
    $atom_site = obtain_atom_site( '-' );
} else {
    die( "Use command \"nr-generate --help\" in order to see the manual.\n" );
}

# Calculates dihedral angles.
if( $atom_dihedral ) {
    my $dihedral_site =
	filter( { "atom_site" => $atom_site,
		  "include" => { "[local]_selection_state" => [ "T" ] },
		  "exclude" => { "[local]_selection_order" => [ "?" ] } } );
    my @dihedral_atom_ids =
	sort { $dihedral_site->{"$a"}{"[local]_selection_order"}
	   <=> $dihedral_site->{"$b"}{"[local]_selection_order"} }
        keys %{ $dihedral_site };

    for( my $i = 0; $i <= $#dihedral_atom_ids; $i = $i + 4 ) {
    	my $first_atom_id = $dihedral_atom_ids[$i];
    	my $second_atom_id = $dihedral_atom_ids[$i+1];
    	my $third_atom_id = $dihedral_atom_ids[$i+2];
    	my $fourth_atom_id = $dihedral_atom_ids[$i+3];
	my $dihedral_angle =
	    dihedral_angle(
		[ [ $dihedral_site->{"$first_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$first_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$first_atom_id"}{"Cartn_z"} ],
		  [ $dihedral_site->{"$second_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$second_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$second_atom_id"}{"Cartn_z"} ],
		  [ $dihedral_site->{"$third_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$third_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$third_atom_id"}{"Cartn_z"} ],
		  [ $dihedral_site->{"$fourth_atom_id"}{"Cartn_x"},
		    $dihedral_site->{"$fourth_atom_id"}{"Cartn_y"},
		    $dihedral_site->{"$fourth_atom_id"}{"Cartn_z"} ] ] );

	if( $in_degrees ) {
	    printf( "%.3f", $dihedral_angle * 180 / pi() );
	} else {
	    printf( "%.3f", $dihedral_angle );
	}
    }

} elsif( $residue_dihedral ) {

}
