#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
use Try::Tiny;

use ForceField::Parameters;
use Logging qw( error
                warning );
use PDBxParser qw( filter_new
                   mark_selection
                   raw2indexed
                   related_category_data
                   obtain_pdb_atom_site
                   obtain_pdbx_data
                   to_pdbx );
use Grammar::SelectionParser;
use Logging qw( error );
use Version qw( $VERSION );

Getopt::Long::Configure qw( gnu_getopt );

our $VERSION = $VERSION;

#*rotag_select [options] [--] <cif-file>...
#*    select and mark atoms of interest by adding selection state [T|S|I] to
#*    _atom_site category in PDBx.
#*
#*Usage:
#*    rotag_select \
#*        --target 'resname ASP' --select 'resid 1..10' input.cif > output.cif
#*    rotag_select \
#*        --target 'model 5' \
#*        --target 'model 10' input1.cif input2.cif > output.cif
#*
#*Options:
#*    -t, --target <selection-query>
#*                        command describing the residues that will be marked
#*                        as target (T) (default: all).
#*
#*                        Selection keywords (equivalent PDBx category data
#*                        items in parentheses):
#*                            all       - all atoms;
#*                            atomid    - atom id number;
#*                            atomname  - atom name;
#*                            atomtype  - atom symbol;
#*                            resid     - residue id number;
#*                            authresid - author residue id number;
#*                            resname   - residue name;
#*                            chain     - chain name;
#*                            authchain - author chain name;
#*                            altid     - alt atom id;
#*                            model     - pdbx model num;
#*                            mainchain - mainchain atoms;
#*                            sidechain - sidechain atoms;
#*                            hetatoms  - heteroatoms;
#*                            target    - target atoms (--select uses
#*                                        --target atoms and --target uses
#*                                        target atoms described in a file).
#*
#*                        Selection operators:
#*                            around - atoms around <int> angstroms;
#*                            byres  - expands to residues;
#*                            rand   - selects <int> number of atoms randomly;
#*                            angles - assigns min <float> and max <float>
#*                                     angle range where selected angles should
#*                                     be in (e.g. angles 'chi1=90..160' or
#*                                     'psi=60..70, phi=50..80');
#*                            expand - expands the selection by one step that
#*                                     follows the connections.
#*
#*                        List operators:
#*                            .. - range of integers (e.g. 2..5 is 2,3,4,5);
#*                            ,  - list of integers or keywords (e.g. 2,3 or
#*                                 A,B).
#*
#*                        Map operators:
#*                            = - assigns value to the string (e.g. chi1=1.0).
#*
#*                        Logical operators:
#*                            && - and operator;
#*                            || - or operator;
#*                            !  - negation operator;
#*                            () - parentheses;
#*                            ;  - group/order selection separator.
#*
#*                        Annotation operator:
#*                            : - assigns <int> or <str> as group id.
#*    -s, --select <selection-query>
#*                        command (same as --target) describing the atoms that
#*                        will be marked as selected (S) (default: target).
#*    --tags <tag>[,<tag>...]
#*                        select PDBx tag that will be in the output
#*                        (default: '_atom_site,_[local]_rotamer_angle,_[local]_dihedral_angle,_[local]_rotamer_energy,_[local]_pairwise_energy,_[local]_energy,_[local]_rmsd').
#*    -r, --related-data
#*                        only related data records from other categories are
#*                        shown when '_atom_site' records are selected.
#*    -p, --pdb
#*                        input file is in PDB format.
#*    -k, --keep-ignored
#*                        keep ignored atoms.
#*    -x, --rand-seed <int>
#*                        set a seed for random (rand) selection.
#*    -v, --version
#*                        print version.

# --------------------------------- Options ----------------------------------- #

my $target_cmds;
my $select_cmds;
my $tags = '_atom_site,_[local]_rotamer_angle,_[local]_dihedral_angle,_[local]_rotamer_energy,_[local]_pairwise_energy,_[local]_energy,_[local]_rmsd';
my $is_related = 0;
my $is_pdb = 0;
my $keep_ignored = 0;
my $random_seed = 23;
my @category_list = ( '_atom_site', '_[local]_rotamer_angle',
                      '_[local]_dihedral_angle', '_[local]_rotamer_energy',
                      '_[local]_pairwise_energy', '_[local]_energy',
                      '_[local]_rmsd' );

local $SIG{__WARN__} = sub {
    warning( { 'program' => $0, 'message' => @_ } );
};

local $SIG{__DIE__} = sub {
    error( { 'program' => $0, 'message' => @_ } );
};

GetOptions(
    'target|t=s@' => \$target_cmds,
    'select|s=s@' => \$select_cmds,
    'tags=s' => \$tags,
    'related-data|r' => sub { $is_related = 1 },
    'pdb|p' => sub { $is_pdb = 1 },
    'keep-ignored|k' => sub { $keep_ignored = 1 },
    'random-seed|x=s' => \$random_seed,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {
                                $help_message =~ s/^\*$/ /smgx;
                                $help_message =~ s/^\*//smgx;
                                print $help_message, "\n";
                            }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or die 'Error in command line argument.';

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

$tags =~ s/ //g;
my @tags = split /,/, $tags;

my $parameters = Parameters->new();

for( my $i = 0; $i <= $#ARGV; $i++ ) {
    my $pdbx_file = $ARGV[$i];

    # Reads file path, stdin and '-' operator.
    my $pdbx;
    my $atom_site;

    if( $is_pdb ) {
        $atom_site = obtain_pdb_atom_site( $pdbx_file );
    } else {
        $pdbx =
            obtain_pdbx_data( $pdbx_file, \@category_list,
                                  { 'ignore_missing_categories' => 1 } );
        raw2indexed( $pdbx, { 'attributes' => { '_atom_site' => [ 'id' ] } } );
        $atom_site = $pdbx->{'_atom_site'}{'data'};
    }

    # Assigns correct target and select command line arguments for current file.
    # TODO: think about the situations when there are one target or select
    # statement and multiple files. Should the selections be applied to multiple
    # files or only one.
    my $target_cmd;
    if( defined $target_cmds && $i < scalar @{ $target_cmds } ) {
        $target_cmd = $target_cmds->[$i];
    }
    $target_cmd //= 'all';

    my $select_cmd;
    if( defined $select_cmds && $i < scalar @{ $select_cmds } ) {
        $select_cmd = $select_cmds->[$i];
    }

    # Parses command line arguments to select certain atoms in PDBx.
    my $selection_parser = SelectionParser->new();

    # Replaces 'target' keyword with previously selected target ids.
    if( $target_cmd =~ m/target/ ) {
        my @previous_target_atoms;
        for my $atom_id ( keys %{ $atom_site } ) {
            # TODO: decide it should behave when 'S' is present and if we would
            # like to keep that selection.
            if( exists $atom_site->{"$atom_id"}{'[local]_selection_state'} &&
                $atom_site->{"$atom_id"}{'[local]_selection_state'} eq 'T' ) {
                push @previous_target_atoms, $atom_id;
            }
        }

        if( @previous_target_atoms ) {
            my $previous_target_cmd = 'atomid '. join ',', @previous_target_atoms;
            $target_cmd =~ s/target/${previous_target_cmd}/g;
        } else {
            error( { 'program' => $0,
                     'filename' => $pdbx_file,
                     'message' => 'no target atoms where previously ' .
                                  "selected.\n" } );
        }
    }

    my @target_cmds = split /;/smx, $target_cmd;

    # By default, target atoms are used for surrounding atom selection.
    $select_cmd //= $target_cmd;
    $select_cmd =~ s/(target)/$target_cmd/smgx;

    my @target_atom_ids;
    my $group_id = 1;

    for my $target_cmd ( @target_cmds ) {
        push @target_atom_ids,
            @{ $selection_parser->
                   parser( $atom_site,
                           $target_cmd,
                           $parameters,
                           { 'seed' => $random_seed,
                             'group_id' => $group_id } ) };
        $group_id++;
    }

    my @selected_atom_ids =
        @{ $selection_parser->
               parser( $atom_site,
                       $select_cmd,
                       $parameters,
                       { 'seed' => $random_seed } ) };

    mark_selection( $atom_site, { 'target' => \@target_atom_ids,
                                  'select' => \@selected_atom_ids } );

    if( ! $keep_ignored ) {
        $atom_site =
            filter_new( $atom_site,
                        {'exclude' => { '[local]_selection_state' => [ 'I' ] }});
    }

    next if ! %{ $atom_site };

    $pdbx->{'_atom_site'}{'data'} = $atom_site;
    $pdbx->{'_atom_site'}{'metadata'}{'type'} = 'indexed';
    $pdbx->{'_atom_site'}{'metadata'}{'is_loop'} = 1;

    # Checks for related data in existing categories connected to '_atom_site'.
    if( $is_related ) {
        my $related_pdbx_data =
            related_category_data(
                $pdbx,
                { '_atom_site' => {
                      '_[local]_rotamer_angle' =>
                          [ { 'keys' => [ 'label_seq_id',
                                          'label_asym_id',
                                          'pdbx_PDB_model_num',
                                          'label_alt_id' ],
                              'reference_keys' => [ 'label_seq_id',
                                                    'label_asym_id',
                                                    'pdbx_PDB_model_num',
                                                    'rotamer_id' ] } ] } } );
        for my $category ( keys %{ $related_pdbx_data } ) {
            my $reference_category =
                $related_pdbx_data->{$category}{'reference_category'};
            $pdbx->{$reference_category}{'data'} =
                $related_pdbx_data->{$category}{'data'};
        }
    }

    # Prints out the PDBx.
    to_pdbx( $pdbx, { 'add_attributes' =>
                          { '_atom_site' => [ '[local]_selection_state',
                                              '[local]_selection_group' ] },
                      'tags' => \@tags } );
}
