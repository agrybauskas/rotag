#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use POSIX;

use ConnectAtoms qw( create_box );
use PDBxParser qw( filter
                   obtain_atom_site );

#*nr-volmap
#*    generate volumetric map (DSN6) from atom coordinates.
#*
#*USAGE:
#*    nr-volmap --input input.cif > output.cif
#*
#*OPTIONS:
#*    --input <file> | <stdin>
#*        PDBx file.
#*    --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

my %options;

my $version = "1.0.0";

GetOptions(
    "input=s" => \$options{"pdbx_file"},
    "help" => sub { open( my $fh, "<", $0 );
		    while( <$fh> ) {
			my ( $help_message ) = $_ =~ m/^#(\*.*)/;
			$help_message =~ s/^\*$/ /g if $help_message;
			$help_message =~ s/^\*//g if $help_message;
			print( $help_message, "\n" ) if $help_message; }
		    close( $fh );
		    exit; },
    "version" => sub { print $version, "\n";
		       exit; } )
    or die "Error in command line argument.";

# ----------------------------------- Main ------------------------------------ #

# DSN6 header.
# (1)  x start
# (2)  y start
# (3)  z start
# (4)  x extent
# (5)  y extent
# (6)  z extent
# (7)  x sampling rate
# (8)  y sampling rate
# (9)  z sampling rate
# (10) Header(18) * A Cell Edge
# (11) Header(18) * B Cell Edge
# (12) Header(18) * C Cell Edge
# (13) Header(18) * alpha
# (14) Header(18) * beta
# (15) Header(18) * gamma
# (16) Header(19) * (253-3) / (ro_max - ro_min)
# (17) (3 * ro_max - 253 * ro_min) / (ro_max - ro_min)
# (18) Cell Constant Scaling Factor
# (19) 100

sub atom_site_to_dsn6
{
    my ( $args ) = @_;
    # Resolution - length of the cell in Angstroms.
    my ( $atom_site,
	 $resolution,
	 $scaling_factor,
	 $alpha, $beta, $gamma,
	 $ro_min, $ro_max ) =
	( $args->{"atom_site"},
	  $args->{"resolution"},
	  $args->{"alpha"}, $args->{"beta"}, $args->{"gamma"},
	  $args->{"scaling_factor"},
	  $args->{"ro_min"}, $args->{"ro_max"} );
    $resolution //= 0.1;
    $alpha //= 90.00;
    $beta //= 90.00;
    $gamma //= 90.00;
    $scaling_factor //= 100; # TODO: should find a way to choose proper factor.
    $ro_min //= 1;
    $ro_max //= 2;

    my $boundary_box =
	create_box( filter( { "atom_site" => $atom_site,
			      "data" => [ "Cartn_x", "Cartn_y", "Cartn_z" ] } ));

    my $a_edge_length = $boundary_box->[1] - $boundary_box->[0];
    my $b_edge_length = $boundary_box->[3] - $boundary_box->[2];
    my $c_edge_length = $boundary_box->[5] - $boundary_box->[4];

    my $x_start = sprintf( "%.0f", $boundary_box->[0] / $resolution );
    my $y_start = sprintf( "%.0f", $boundary_box->[2] / $resolution );
    my $z_start = sprintf( "%.0f", $boundary_box->[4] / $resolution );

    my $x_extent = sprintf( "%.0f", $a_edge_length / $resolution ) + 1;
    my $y_extent = sprintf( "%.0f", $b_edge_length / $resolution ) + 1;
    my $z_extent = sprintf( "%.0f", $c_edge_length / $resolution ) + 1;

    my $x_sampling_rate = sprintf( "%.0f", $a_edge_length / $resolution );
    my $y_sampling_rate = sprintf( "%.0f", $b_edge_length / $resolution );
    my $z_sampling_rate = sprintf( "%.0f", $c_edge_length / $resolution );

    my $a_scaled = $a_edge_length * $scaling_factor;
    my $b_scaled = $b_edge_length * $scaling_factor;
    my $c_scaled = $c_edge_length * $scaling_factor;

    my $alpha_scaled = $alpha * $scaling_factor;
    my $beta_scaled = $beta * $scaling_factor;
    my $gamma_scaled = $gamma * $scaling_factor;

    # Density value modifiers - Header 16, 17.
    my $density_modifier_1 = ( 100 * 250 ) / ( $ro_max - $ro_min );
    my $density_modifier_2 = ( 3 * $ro_max - 253 * $ro_min )
	                   / ( $ro_max - $ro_min );

    # Writes to stdout.
    open( my $fh, '>-' ) || die "Can't print to stdout: $!";
    binmode( $fh );
    print $fh pack( "(s>)19",
		    # TODO: try to figure out what units they are calculated in.
    		    $x_start, $y_start, $z_start,
    		    $x_extent, $y_extent, $z_extent,
    		    $x_sampling_rate, $y_sampling_rate, $z_sampling_rate,
    		    $a_scaled, $b_scaled, $c_scaled,
    		    $alpha_scaled, $beta_scaled, $gamma_scaled,
    		    $density_modifier_1, $density_modifier_2,
    		    $scaling_factor, 100 );
    foreach( 0..$x_extent*$y_extent*$z_extent*2 ) { print $fh pack( "s", 0 );}
    close( $fh );

    return;
}

# Reads file path, stdin and "-" operator.
my $atom_site;
if( $options{"pdbx_file"} ) {
    $atom_site = obtain_atom_site( $options{"pdbx_file"} );
} elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
    $atom_site = obtain_atom_site( '-' );
} else {
    die( "Use command \"nr-volmap --help\" in order to see the manual.\n" );
}

# ----------------------------------------------------------------------------- #

my $target_atom_site =
    filter( { "atom_site" => $atom_site,
	      "include" => { "[local]_selection_state" => [ "T" ] } } );

atom_site_to_dsn6( { "atom_site" => $target_atom_site } );
