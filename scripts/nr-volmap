#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use POSIX;

use ConnectAtoms qw( create_box );
use PDBxParser qw( filter
                   obtain_atom_site );
use Data::Dumper;
#*nr-volmap
#*    generate volumetric map (DSN6) from atom coordinates.
#*
#*USAGE:
#*    nr-volmap --input input.cif > output.cif
#*
#*OPTIONS:
#*    --input <file> | <stdin>
#*        PDBx file.
#*    --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

my %options;

my $version = "1.0.0";

GetOptions(
    "input=s" => \$options{"pdbx_file"},
    "help" => sub { open( my $fh, "<", $0 );
		    while( <$fh> ) {
			my ( $help_message ) = $_ =~ m/^#(\*.*)/;
			$help_message =~ s/^\*$/ /g if $help_message;
			$help_message =~ s/^\*//g if $help_message;
			print( $help_message, "\n" ) if $help_message; }
		    close( $fh );
		    exit; },
    "version" => sub { print $version, "\n";
		       exit; } )
    or die "Error in command line argument.";

# ----------------------------------- Main ------------------------------------ #

# DSN6 header.
# (1)  x start
# (2)  y start
# (3)  z start
# (4)  x extent
# (5)  y extent
# (6)  z extent
# (7)  x sampling rate
# (8)  y sampling rate
# (9)  z sampling rate
# (10) Header(18) * A Cell Edge
# (11) Header(18) * B Cell Edge
# (12) Header(18) * C Cell Edge
# (13) Header(18) * alpha
# (14) Header(18) * beta
# (15) Header(18) * gamma
# (16) Header(19) * (253-3) / (ro_max - ro_min)
# (17) (3 * ro_max - 253 * ro_min) / (ro_max - ro_min)
# (18) Cell Constant Scaling Factor
# (19) 100

sub atom_site_to_dsn6
{
    my ( $args ) = @_;
    # Resolution - length of the cell in Angstroms.
    my ( $atom_site, $resolution ) = ( $args->{"atom_site"} );

    my $boundary_box =
	create_box( filter( { "atom_site" => $atom_site,
			      "data" => [ "Cartn_x", "Cartn_y", "Cartn_z" ] } ));

    my $x_start = floor( $boundary_box->[0] );
    my $y_start = floor( $boundary_box->[2] );
    my $z_start = floor( $boundary_box->[4] );

    my $x_extent = ceil( $boundary_box->[1] ) - $x_start;
    my $y_extent = ceil( $boundary_box->[3] ) - $y_start;
    my $z_extent = ceil( $boundary_box->[5] ) - $z_start;

    my $x_sampling_rate;
    my $y_sampling_rate;
    my $z_sampling_rate;

    # open( my $fh, '>-' ) || die "Can't print to stdout: $!";
    # binmode( $fh );
    # close( $fh );
    # return;
}

# Reads file path, stdin and "-" operator.
my $atom_site;
if( $options{"pdbx_file"} ) {
    $atom_site = obtain_atom_site( $options{"pdbx_file"} );
} elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
    $atom_site = obtain_atom_site( '-' );
} else {
    die( "Use command \"nr-volmap --help\" in order to see the manual.\n" );
}

# ----------------------------------------------------------------------------- #

my $target_atom_site =
    filter( { "atom_site" => $atom_site,
	      "include" => { "[local]_selection_state" => [ "T" ] } } );

atom_site_to_dsn6( { "atom_site" => $target_atom_site } );
