#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
Getopt::Long::Configure qw( gnu_getopt );

use PDBxParser qw( obtain_pdbx_loop
                   to_pdbx );
use Version qw( $VERSION );

our $VERSION = $VERSION;

#*rotag_aggregate [options] file1 file2 [file3, ...]
#*    combine multiple PDBx outputs.
#*
#*USAGE:
#*    rotag_aggregate input.cif
#*    rotag_aggregate -r input.cif
#*
#*OPTIONS:
#*    -r, --renumber
#*        extension for the file if basename is present.
#*    -v, --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

my $do_renumbering = 0;

GetOptions(
    'r|renumber' => \$do_renumbering,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {$help_message =~ s/^\*$/ /smgx;}
                            if( $help_message ) { $help_message =~ s/^\*//smgx; }
                            if( $help_message ) { print $help_message, "\n"; }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or die 'Error in command line argument.';

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

# TODO: make it to read multiple files from STDIN.
my @categories =
    qw( _atom_site _[local]_dihedral_angle _[local]_rotamer_angle _[local]_energy
        _[local]_pairwise_energy  _[local]_rmsd _[local]_rotamer_energy );

# for my $pdbx_file ( @ARGV ) {
#     # Reads file path, stdin and '-' operator.
#     my $pdbx_loops;
#     if( $pdbx_file ) {
#         $pdbx_loops = obtain_pdbx_loop( \@categories );
#     } else {
#         die "Use command \"rotag_aggregate --help\" in order to see the " .
#             "manual.\n";
#     }
# }
