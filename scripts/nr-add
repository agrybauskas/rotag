#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use List::MoreUtils qw( uniq );

use PDBxParser qw( filter
                   obtain_atom_site
                   obtain_pdbx_loop
                   to_pdbx );
use PseudoAtoms qw( generate_rotamer );
use Grammar::CommandLineParser;

#*nr-add
#*    adds pseudo atoms.
#*
#*USAGE:
#*    nr-add --rotamer --input input.cif > output.cif
#*
#*OPTIONS:
#*    --input <file> | <stdin>
#*        PDBx file.
#*    --rotamer
#*        adds pseudo atoms of defined rotamers. Input .cif has to contain
#*        _[local]_rotamer_angle category (can be produced with nr-rotamer).
#*    --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

my %options;

my $version = "1.0.0";
my $add_rotamer = 0;

GetOptions(
    "input=s" => \$options{"pdbx_file"},
    "rotamer" => sub { $add_rotamer = 1 },
    "help" => sub { open( my $fh, "<", $0 );
		    while( <$fh> ) {
			my ( $help_message ) = $_ =~ m/^#(\*.*)/;
			$help_message =~ s/^\*$/ /g if $help_message;
			$help_message =~ s/^\*//g if $help_message;
			print( $help_message, "\n" ) if $help_message; }
		    close( $fh );
		    exit; },
    "version" => sub { print $version, "\n";
		       exit; } )
    or die "Error in command line argument.";

# ----------------------------------- Main ------------------------------------ #

# Reads file path, stdin and "-" operator.
my $atom_site;
if( $options{"pdbx_file"} ) {
    $atom_site = obtain_atom_site( $options{"pdbx_file"} );
} elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
    $atom_site = obtain_atom_site( '-' );
} else {
    die( "Use command \"nr-add --help\" in order to see the manual.\n" );
}

if( $add_rotamer ) {
    # Extracts rotamer angle data that will used to generate atom coordinates.
    my $pdbx_loop_data;
    if( $options{"pdbx_file"} ) {
	$pdbx_loop_data =
	    obtain_pdbx_loop( $options{"pdbx_file"}, [ "_rotamer_angle" ] );
    } elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
	$pdbx_loop_data =
	    obtain_pdbx_loop( '-', [ "_rotamer_angle" ] );
    } else {
	die( "No library was detected. Generate library with 'nr-rotamer'." );
    }

    # Generates actual pseudo atoms from rotamer angles.
    my @residue_ids =
	uniq(
	    @{ filter( { "atom_site" => $atom_site,
			 "include" => { "[local]_selection_state" => [ "T" ] },
			 "data" => [ "label_seq_id" ],
			 "is_list" => 1 } ) } );
}

# # Prints out cif.
# to_pdbx( { "atom_site" => $selected_atom_site,
# 	   "add_atom_attributes" => [ "[local]_selection_state" ],
# 	   "pdbx_loops" => \%pdbx_loops } );
