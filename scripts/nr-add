#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use List::MoreUtils qw( uniq );
use List::Util qw( max );

use PDBxParser qw( filter
                   obtain_atom_site
                   obtain_pdbx_loop
                   to_pdbx );
use PseudoAtoms qw( generate_pseudo );
use Grammar::CommandLineParser;

#*nr-add
#*    adds pseudo atoms.
#*
#*USAGE:
#*    nr-add --rotamer --input input.cif > output.cif
#*
#*OPTIONS:
#*    --input <file> | <stdin>
#*        PDBx file.
#*    --rotamer-atoms
#*        adds pseudo atoms of defined rotamers. Input .cif has to contain
#*        _[local]_rotamer_angle category (can be produced with nr-rotamer).
#*    --version
#*        print version.

# --------------------------------- Options ----------------------------------- #

my %options;

my $version = "1.0.0";
my $add_rotamer_atoms = 0;

GetOptions(
    "input=s" => \$options{"pdbx_file"},
    "rotamer-atoms" => sub { $add_rotamer_atoms = 1 },
    "help" => sub { open( my $fh, "<", $0 );
		    while( <$fh> ) {
			my ( $help_message ) = $_ =~ m/^#(\*.*)/;
			$help_message =~ s/^\*$/ /g if $help_message;
			$help_message =~ s/^\*//g if $help_message;
			print( $help_message, "\n" ) if $help_message; }
		    close( $fh );
		    exit; },
    "version" => sub { print $version, "\n";
		       exit; } )
    or die "Error in command line argument.";

# ----------------------------------- Main ------------------------------------ #

# Reads file path, stdin and "-" operator.
my $atom_site;
if( $options{"pdbx_file"} ) {
    $atom_site = obtain_atom_site( $options{"pdbx_file"} );
} elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
    $atom_site = obtain_atom_site( '-' );
} else {
    die( "Use command \"nr-add --help\" in order to see the manual.\n" );
}

if( $add_rotamer_atoms ) {
    # Extracts rotamer angle data that will used to generate atom coordinates.
    my $pdbx_loops;
    if( $options{"pdbx_file"} ) {
	$pdbx_loops =
	    obtain_pdbx_loop( $options{"pdbx_file"}, [ "_rotamer_angle" ] );
    } elsif( ! defined $options{"pdbx_file"} && ! -t STDIN ) {
	$pdbx_loops =
	    obtain_pdbx_loop( '-', [ "_rotamer_angle" ] );
    } else {
	die( "No library was detected. Generate library with 'nr-rotamer' " .
	     "program." );
    }

    # Generates actual pseudo atoms from rotamer angles.
    my $target_atom_ids =
    	filter( { "atom_site" => $atom_site,
    		  "include" => { "[local]_selection_state" => [ "T" ] },
    		  "data" => [ "id" ],
    		  "is_list" => 1 } );

    # Generates data structure from $pdbx_loops.
    # TODO: maybe generate general data structure that can be created through
    # unique id.
    my $attributes = $pdbx_loops->{"_rotamer_angle"}{"attributes"};
    my $data = $pdbx_loops->{"_rotamer_angle"}{"data"};

    my ( $resid_attr_pos ) =
    	grep { $attributes->[$_] eq "residue_id" } 0..$#{ $attributes };
    my ( $rotid_attr_pos ) =
    	grep { $attributes->[$_] eq "rotamer_id" } 0..$#{ $attributes };
    my ( $type_attr_pos ) =
    	grep { $attributes->[$_] eq "type" } 0..$#{ $attributes };
    my ( $value_attr_pos ) =
	grep { $attributes->[$_] eq "value" } 0..$#{ $attributes };

    # TODO: maybe should add rotamer id's to atom_site for continuity.
    my %rotamer_angles;
    for( my $i = 0; $i <= $#{ $data }; $i = $i + $#{ $attributes } + 1 ) {
	$rotamer_angles
	    {$data->[$i+$resid_attr_pos]}
	    {$data->[$i+$rotid_attr_pos]}
	    {$data->[$i+$type_attr_pos]} =
		[ $data->[$i+$value_attr_pos] ];
    }

    my $last_atom_id = max( keys %{ $atom_site } );
    my %rotamer_atom_site;
    for my $atom_id ( @{ $target_atom_ids } ) {
    	my $residue_id = $atom_site->{$atom_id}{"label_seq_id"};
	for my $rotamer_id ( sort keys %{ $rotamer_angles{$residue_id} } ) {
	    my $rotamer_angles = $rotamer_angles{$residue_id}{$rotamer_id};
	    # %rotamer_atom_site =
	    # 	( %rotamer_atom_site,
	    # 	  %{ generate_pseudo( $atom_site,
	    # 			      { "id" => [ $atom_id ] },
	    # 			      $rotamer_angles,
	    # 			      $last_atom_id ) } );
	    $last_atom_id++;
	}
    }
    # print Dumper \%rotamer_atom_site;
}

# # Prints out cif.
# to_pdbx( { "atom_site" => $selected_atom_site,
# 	   "add_atom_attributes" => [ "[local]_selection_state" ],
# 	   "pdbx_loops" => \%pdbx_loops } );
