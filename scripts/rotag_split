#!/usr/bin/perl

use strict;
use warnings;

use autodie;
use Getopt::Long;
Getopt::Long::Configure qw( gnu_getopt );

use PDBxParser qw( filter
                   obtain_atom_site
                   to_pdbx );
use Version qw( $VERSION );

our $VERSION = $VERSION;

#*rotag_split [options] <file>...
#*    split PDBx into smaller ones according to the specified attribute or
#*    attributes.
#*
#*Usage:
#*    rotag_split -b 'resid' -n 'output' input.cif
#*    rotag_split -b 'resid,chain' input.cif
#*
#*Options:
#*    -b, --by <attribute>        attribute or attributes that will split PDBx
#*                                into multiple files.
#*
#*                                Available attributes:
#*                                    atomid    - atom id number;
#*                                    atomname  - atom name;
#*                                    atomtype  - atom symbol;
#*                                    resid     - residue id number;
#*                                    resname   - residue name;
#*                                    chain     - chain name;
#*                                    alt       - disorder;
#*                                    model     - entity id;
#*                                    group     - selection group.
#*
#*    -n, --basename <basename>   basename of the output file.
#*
#*    -e, --extension <extension> extension for the file if basename is present
#*                                (default: cif).
#*
#*    -v, --version               print version.

# --------------------------------- Options ----------------------------------- #

my $split_by = 'entity';
my $basename = '';
my $extension = 'cif';

GetOptions(
    'by|b=s' => \$split_by,
    'basename|n=s' => \$basename,
    'extension|e=s' => \$extension,
    'help|h' => sub {
                        open my $fh, '<', $0;
                        while( <$fh> ) {
                            my ( $help_message ) = $_ =~ m/^#(\*.*)/;
                            if( $help_message ) {$help_message =~ s/^\*$/ /smgx;}
                            if( $help_message ) { $help_message =~ s/^\*//smgx; }
                            if( $help_message ) { print $help_message, "\n"; }
                        }
                        close $fh;
                        exit;
                    },
    'version|v' => sub { print $VERSION, "\n"; exit; }
) or die 'Error in command line argument.';

my %attribute_equivalent = (
    'atomid' => 'id', 'atomname' => 'label_atom_id', 'atomtype' => 'type_symbol',
    'resid' =>  'label_seq_id', 'resname' => 'label_comp_id',
    'chain' => 'label_asym_id', 'altid' => 'label_alt_id',
    'model' => 'pdbx_PDB_model_num', 'group' => '[local]_selection_group'
);

# ----------------------------------- Main ------------------------------------ #

local @ARGV = ( q{-} ) unless @ARGV;

for my $pdbx_file ( @ARGV ) {
    # Reads file path, stdin and '-' operator.
    my $atom_site;
    if( $pdbx_file ) {
        $atom_site = obtain_atom_site( $pdbx_file );
    } else {
        die "Use command \"rotag_split --help\" in order to see the manual.\n";
    }

    # Splits PDBx.
    my @split_by = map { $attribute_equivalent{$_} }
                   map { split / /sm }
                       split /,/smx, $split_by;

    my %split_groups;
    for my $atom_id ( sort keys %{ $atom_site } ) {
        # Creates group determining key that is used to sort atoms.
        my @attribute_values;
        for my $attribute ( @split_by ) {
            push @attribute_values, $atom_site->{$atom_id}{$attribute};
        }

        my $group_key = join q{,}, @attribute_values;

        if( exists $split_groups{$group_key} ) {
            push @{ $split_groups{$group_key} }, $atom_id;
        } else {
            $split_groups{$group_key} = [ $atom_id ];
        }
    }

    my $split_counter = 1;
    for my $split_group ( sort keys %split_groups ) {
        # Prints out the PDBx.
        if( $basename ) {
            my $file_name = "$basename-$split_counter.$extension";
            open( my $fh, '>', $file_name );
            to_pdbx(
                { 'atom_site' =>
                      filter( { 'atom_site' => $atom_site,
                                'include' =>
                                    { 'id' => $split_groups{$split_group} } } ),
                  'add_atom_attributes' =>
                      [ '[local]_selection_state',
                        '[local]_selection_group' ],
                  'fh' => \*{$fh} }
            );
            close( $fh );
            $split_counter++;
        } else {
            to_pdbx(
                { 'atom_site' =>
                      filter( { 'atom_site' => $atom_site,
                                'include' =>
                                    { 'id' => $split_groups{$split_group} } } ),
                  'add_atom_attributes' =>
                      [ '[local]_selection_state',
                        '[local]_selection_group' ] }
            );
        }
    }
}
