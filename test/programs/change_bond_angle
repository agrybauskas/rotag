#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;

use Math::Complex;
use Math::Algebra::Symbols;

use lib "../../lib/perl";
use CifParser;
use AlterMolecule;

my $attribute_filter = shift;
my $attribute_select = shift;
my $angle_min_max = shift; # Amount of which bond will change.
my $num_of_points = shift;
my @cif = <>;

# Parses selector argument from string  to proper array.
my @attribute_filter = [ map { $_->[0] => [ split( ",", @$_[1] ) ] }
                         map { [ split( " ", $_ ) ] }
                         split( "&", $attribute_filter ) ];
my @attribute_select = [ split( ",", $attribute_select ) ];

# Prints count of atoms and arbitrary word. Neccessary for Jmol.
print( scalar( grep { /ATOM/ } @cif ) + $num_of_points - 2, "\n" );
print( "testing\n" );

# Prepares selected atom data for Jmol.
map { print( $_->[2], "\t", $_->[10], "\t", $_->[11], "\t", $_->[12], "\n" ) }
map { [ split( " ", $_ ) ] }
grep { $_ =~ /ATOM/ }
@cif;

my @selected_atom_data =
    @{ CifParser::select_atom_data( @attribute_filter,
				    @attribute_select,
				    @cif ) };

# Changes bond by certain distance.
my $transl_atom_coord =
    AlterMolecule::change_bond_len( $selected_atom_data[1],
				    $selected_atom_data[2],
				    $selected_atom_data[0],
				    $selected_atom_data[3] );

# Smallest change in bond length by given num_of_points and bond_min_max.
my $smallest_angle = $bond_min_max / $num_of_points;

# # Calculates angles that will be rotated along.
# my $theta;
# my $psi;

# my @delta_lengths =
#     map { $_ * $smallest_length, - ( $_ * $smallest_length ) }
#         ( 1..( $num_of_points - 1 ) / 2 );

# # Evaluates symbolic expression.
# my $eval_expression;

# # Rotates again along chi angle and creates Jmol readable struct file.
# foreach( @delta_lengths ) {
#     $r = $_;
#     foreach( @$transl_atom_coord ) {
# 	print( "X\t" );
# 	foreach( @$_[0..2] ) {
# 	    foreach( @$_ ) {
# 		$eval_expression = Re( eval( $_ ) ); # Takes only real
# 		                                     # the complex number.
# 		printf( "%.3f\t", $eval_expression );
# 	    }
# 	}
# 	print( "\n" );
#     }
# }
