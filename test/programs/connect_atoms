#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;

use lib "../../lib/perl";
use CifParser;
use ConnectAtoms;

##
## Unit test: connect_atoms
##
## Shows connections between atoms.
##
## Example: ./connect_atoms 1.51 0.15 < example.cif
##

my $bond_length       = shift; # In angstroms.
my $bond_length_error = shift; # In angstroms.
my @cif_file;                  # mmcif format file.

while( <> ) {
    push( @cif_file, $_ );
}

my $all_atom_coord =
    CifParser::select_atom_data( [],
				 [ "Cartn_x", "Cartn_y", "Cartn_z" ],
				 @cif_file );

my %connected_atoms =
    %{ ConnectAtoms::connect_atoms( $bond_length,
				    $bond_length_error,
				    @$all_atom_coord ) };

my @atom_coord;
my $parent_atom;
my $child_atom;

foreach( keys %connected_atoms ) {
    @atom_coord = split( ",", $_ );
    ( undef, $parent_atom ) =
    	CifParser::filter_atoms( [ "Cartn_x" => $atom_coord[0],
    				   "Cartn_y" => $atom_coord[1],
    				   "Cartn_z" => $atom_coord[2] ],
    				 @cif_file );

    foreach( @{ $connected_atoms{$_} } ) {
    	@atom_coord = split( ",", $_ );
    	( undef, $child_atom ) =
    	    CifParser::filter_atoms( [ "Cartn_x" => $atom_coord[0],
    				       "Cartn_y" => $atom_coord[1],
    				       "Cartn_z" => $atom_coord[2] ],
    				     @cif_file );

    	print( $parent_atom->[1] . " " . $parent_atom->[3] . ":"
    	     . $child_atom ->[1] . " " . $child_atom ->[3]  . "\n" );

    }
}
