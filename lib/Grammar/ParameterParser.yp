#!perl
%{
    use warnings;
%}

%left '=' ','

%%

exp:
    | exp ',' exp
        {
            if( ref $_[1] eq 'ARRAY' && ref $_[3] eq 'ARRAY' ) {
                return [ @{ $_[1] }, @{ $_[3] }  ];
            } elsif( ref $_[1] eq 'HASH' && ref $_[3] eq 'HASH' ) {
                return { %{ $_[1] }, %{ $_[3] } };
            } else {
                die "Arrays cannot be in the same data structure with hashes.\n";
            }
        }
    | STR '=' '[' exp ']' { return { $_[1] => $_[4] }; }
    | STR '=' '{' exp '}' { return { $_[1] => $_[4] }; }
    | STR '=' STR { return { $_[1] => $_[3] }; }
    | STR { return [ $_[1] ] }
    ;

%%

sub lexer
{
    my( $parser ) = shift;

    $parser->YYData->{INPUT} || return( '',undef );
    $parser->YYData->{INPUT} =~ s/^\s?//;

    # Returns tokens to parser.
    for( $parser->YYData->{INPUT} ){
        if( s/^(\[)// ) {
            return ( '[', $1 );
        } elsif( s/^(\])// ) {
            return ( ']', $1 );
        } elsif( s/^({)// ) {
            return ( '{', $1 );
        } elsif( s/^(})// ) {
            return ( '}', $1 );
        } elsif( s/^(=)// ) {
            return ( '=', $1 );
        } elsif( s/^(,)// ) {
            return ( ',', $1 );
        } elsif( s/^([A-Za-z0-9]*)// ) {
            return ( 'STR', $1 );
        }
    }
}

sub debugger
{
    exists $_[0]->YYData->{ERRMSG}

    and do {
        print $_[0]->YYData->{ERRMSG};
        return;
    };

    print "Syntax error\n";
}

sub parser
{
    my ( $self, $input ) = @_;

    $self->YYData->{INPUT} = $input;

    my $parameter_data =
        $self->YYParse( yylex => \&lexer,
                        yyerror => \&debugger,
                        yydebug=>0x00 ); # 0x00 0x1F

    use Data::Dumper;
    print STDERR Dumper $parameter_data;

    # return $parameter_data;
}
