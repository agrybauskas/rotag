#!perl
%{
    use warnings;

    use List::MoreUtils qw( uniq );
    use List::Util qw( any );

    use AtomProperties qw( @MAINCHAIN_GRAMMAR
                           @SIDECHAIN_GRAMMAR );
    use ConnectAtoms qw( around_distance );
    use PDBxParser qw( filter );
%}

%left ','
%left '-'
%left 'around' 'rand'
%right 'byres' 'mainchain' 'sidechain'
%left '!'
%left '|' '&'

%%

line
    : exp
        {
            if( ! $_[1]->[0] ) { return []; }
            if( $_[1]->[0] eq '!' ) {
                return [];
            } else {
                return [ uniq( @{ $_[1] } ) ];
            }
        }
;
# TODO: main and side should be written as exp mainchain exp, exp sidechain exp.
exp
    : 'all'
        {
            return [ keys %{ $_[0]->{USER}{ATOM_SITE}{atoms} } ];
        }
    | 'mainchain' exp
        {
            return $_[0]->{USER}{ATOM_SITE}->filter( { 'include' =>
                                                         { 'id' => $_[2],
                                                           'label_atom_id' =>
                                                               \@MAINCHAIN_GRAMMAR },
                                                       'return_ids' => 1 } );
        }
    | 'sidechain' exp
        {
            return $_[0]->{USER}{ATOM_SITE}->filter( { 'include' =>
                                                         { 'id' => $_[2],
                                                           'label_atom_id' =>
                                                               \@SIDECHAIN_GRAMMAR },
                                                       'return_ids' => 1 } );
        }
    | 'byres' exp
        {
            my @residue_ids =
                uniq( @{ $_[0]->{USER}{ATOM_SITE}
                              ->filter( { 'include' => { 'id' => $_[2] } } )
                              ->extract( { 'data' => [ 'label_seq_id' ],
                                           'is_list' => 1 } ) } );
            my @chains =
                uniq( @{ $_[0]->{USER}{ATOM_SITE}
                              ->filter( { 'include' => { 'id' => $_[2] } } )
                              ->extract( { 'data' => [ 'label_asym_id' ],
                                           'is_list' => 1 } ) } );
            my @pdbx_model_num =
                uniq( @{ $_[0]->{USER}{ATOM_SITE}
                              ->filter( { 'include' => { 'id' => $_[2] } } )
                              ->extract( { 'data' => [ 'pdbx_PDB_model_num' ],
                                           'is_list' => 1 } ) } );
            my @alt =
                uniq( @{ $_[0]->{USER}{ATOM_SITE}
                              ->filter( { 'include' => { 'id' => $_[2] } } )
                              ->extract( { 'data' => [ 'label_alt_id' ],
                                           'is_list' => 1 } ) } );

            return $_[0]->{USER}{ATOM_SITE}
                        ->filter( { 'include' =>
                                        { 'label_seq_id' => \@residue_ids,
                                          'label_asym_id' => \@chains,
                                          'label_alt_id' => [ @alt, '.' ],
                                          'label_entity_id' => \@pdbx_model_num, } } )
                        ->extract( { 'data' => [ 'id' ],
                                     'is_list' => 1 } );
        }
    | exp '&' exp
        {
            my @joint_ids;
            if( ! @{ $_[1] } || ! @{ $_[3] } ) { return []; }
            my @first_ids = @{ $_[1] };
            my @second_ids = @{ $_[3] };
            if( $first_ids[0] ne '!' && $second_ids[0] ne '!' ) {
                for my $id ( @first_ids ) {
                    push( @joint_ids, $id ) if any { $id eq $_ } @second_ids;
                }
                return \@joint_ids;
            } elsif( $first_ids[0] ne '!' && $second_ids[0] eq '!' ) {
                for my $id ( @first_ids ) {
                    push( @joint_ids, $id ) if ! any { $id eq $_ } @second_ids;
                }
                return \@joint_ids;
            } elsif( $first_ids[0] eq '!' && $second_ids[0] ne '!' ) {
                for my $id ( @second_ids ) {
                    push( @joint_ids, $id ) if ! any { $id eq $_ } @first_ids;
                }
                return \@joint_ids;
            } else {
                shift( @first_ids );
                shift( @second_ids );
                return [ '!', uniq( @first_ids, @second_ids ) ];
            }
        }
    | exp '|' exp
        {
            if( ! @{ $_[1] } || ! @{ $_[3] } ) {
                return [ @{ $_[1] }, @{ $_[3] } ];
            }
            if( $_[1]->[0] ne '!' && $_[3]->[0] ne '!' ) {
                return [ uniq( @{ $_[1] }, @{ $_[3] } ) ];
            } else {
                die( 'Negation (!) with or operator (|) has no valuable ' .
                     'meaning when selecting atoms' );
            }
        }
    | '(' exp ')'
        {
            $_[2];
        }
    | '!' exp
        {
            my @ids = @{ $_[2] };
            if( $ids[0] eq '!' ) {
                shift( @ids );
                return \@ids;
            } else {
                unshift( @ids, '!' );
                return \@ids;
            }
        }
    | exp 'around' NUM
        {
            my @ids = @{ $_[1] };
            my $around_atom_site;
            my $atom_specifier;
            if( $ids[0] eq '!' ) {
            #   # TODO: should look how to deal with negations.
            #   shift( @ids );
            #   return \@ids;
            } else {
                unshift( @ids, '!' );
                $around_atom_site =
                    around_distance( $_[0]->{USER}{ATOM_SITE}{atoms},
                                     { 'id' => $_[1] },
                                     $_[3] );
                return [ keys %{ $around_atom_site } ];
            }
        }
    | exp 'rand' NUM
        {
            srand( $_[0]->{USER}{SEED} );
            my @ids = @{ $_[1] };
            my @rand_ids;
            if( scalar( @ids ) < $_[3] ) {
                die( "List of $#ids atoms is smaller than the request of " .
                     "$_[3] atoms." );
            }
            foreach( 1..$_[3] ) {
                my $rand_idx = rand( $#ids );
                push( @rand_ids, $ids[$rand_idx] );
                splice( @ids, $rand_idx, 1 );
            }
            return \@rand_ids;
        }
    | 'chain' str_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {label_asym_id}{$_} } }
                        @{ $_[2] } ];
        }
    | 'resid' num_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {label_seq_id}{$_} } }
                        @{ $_[2] } ];
        }
    | 'resname' str_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {label_comp_id}{$_} } }
                        @{ $_[2] } ];
        }
    | 'atomid' num_ope
        {
            return $_[2];
        }
    | 'atomname' str_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {label_atom_id}{$_} } }
                        @{ $_[2] } ];
        }
    | 'atomtype' str_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {type_symol}{$_} } }
                        @{ $_[2] } ];
        }
    | 'altid' str_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {label_alt_id}{$_} } }
                        @{ $_[2] } ];
        }
    | 'altid' num_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {label_alt_id}{$_} } }
                        @{ $_[2] } ];
        }
    | 'model' str_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {pdbx_PDB_model_num}{$_} } }
                        @{ $_[2] } ];
        }
    | 'model' num_ope
        {
            return [ map { @{ $_[0]->{USER}{ATOM_SITE}{index_table}
                                     {pdbx_PDB_model_num}{$_} } }
                        @{ $_[2] } ];
        }
;

num_ope
    : num_ope ',' num_ope { [ @{ $_[1] }, @{ $_[3] } ]; }
    | num_ope '-' num_ope { [ $_[1]->[0]..$_[3]->[0] ]; }
    | NUM                 { [ int( $_[1] ) ]; }
;

str_ope
    : str_ope ',' str_ope { [ @{ $_[1] }, @{ $_[3] } ]; }
    | STR                 { [ $_[1] ]; }
;

%%

sub lexer
{
    my( $parser ) = shift;

    $parser->YYData->{INPUT} || return( '',undef );
    $parser->YYData->{INPUT} =~ s/^[ \t]//;

    # Returns tokens to parser.
    for( $parser->YYData->{INPUT} ){
        if( s/^(resid)// ) {
            return ( 'resid', $1 );
        } elsif(s/^(chain)//) {
            return ( 'chain', $1 );
        } elsif(s/^(all)//) {
            return ( 'all', $1 );
        } elsif(s/^(mainchain)//) {
            return ( 'mainchain', $1 );
        } elsif(s/^(sidechain)//) {
            return ( 'sidechain', $1 );
        } elsif(s/^(byres)//) {
            return ( 'byres', $1 );
        } elsif(s/^(resname)//) {
            return ( 'resname', $1 );
        } elsif(s/^(atomid)//) {
            return ( 'atomid', $1 );
        } elsif(s/^(atomname)//) {
            return ( 'atomname', $1 );
        } elsif(s/^(atomtype)//) {
            return ( 'atomtype', $1 );
        } elsif(s/^(altid)//) {
            return ( 'altid', $1 );
        } elsif(s/^(model)//) {
            return ( 'model', $1 );
        } elsif(s/^(around)//) {
            return ( 'around', $1 );
        } elsif(s/^(rand)//) {
            return ( 'rand', $1 );
        } elsif( s/^([0-9]+)// ) {
            return ( 'NUM', $1 );
        } elsif( s/^(\w+)// ) {
            return ( 'STR', $1 );
        } elsif( s/^(,)// ) {
            return ( ',', $1 );
        } elsif( s/^(-)// ) {
            return ( '-', $1 );
        } elsif( s/^(\|)// ) {
            return ( '|', $1 );
        } elsif( s/^(&)// ) {
            return ( '&', $1 );
        } elsif( s/^(\()// ) {
            return ( '(', $1 );
        } elsif( s/^(\))// ) {
            return ( ')', $1 );
        } elsif( s/^(\!)// ) {
            return ( '!', $1 );
        }
    }
}

sub debugger
{
    exists $_[0]->YYData->{ERRMSG}

    and do {
        print $_[0]->YYData->{ERRMSG};
        return;
    };

    print "Syntax error\n";
}

sub parser
{
    my ( $self, $atom_site, $input, $options ) = @_;

    my ( $seed ) = $options->{"seed"};

    $self->YYData->{INPUT} = $input;
    $self->YYData->{ATOM_SITE} = $atom_site;
    $self->YYData->{SEED} = $seed;

    my $selected_atom_ids = $self->YYParse( yylex => \&lexer,
                                            yyerror => \&debugger,
                                            yydebug=>0x00 );

    return $selected_atom_ids;
}
