#!perl
%{
    use warnings;

    use List::MoreUtils qw( uniq );
    use List::Util qw( any );

    use PDBxParser qw( filter );
%}

%left ','
%left '-'
%left '!'
%left '|'
%left '&'

%%

exp
    : exp '&' exp
        {
	    my @joint_ids;
	    for my $id ( @{ $_[1] } ) {
		push( @joint_ids, $id ) if any { $id eq $_ } @{ $_[3] };
	    }
	    return \@joint_ids;
        }
    | exp '|' exp
        {
	    [ uniq( @{ $_[1] }, @{ $_[3] } ) ];
        }
    | '(' exp ')' { $_[2] }
    | '!' exp
    | 'resid' num_ope
        {
	    filter( { 'atom_site' => $_[0]->{USER}{ATOM_SITE},
		      'include' => { 'label_seq_id' => $_[2] },
		      'data' => [ 'id' ],
		      'is_list' => 1 } );
        }
    | 'resname' str_ope
        {
	    filter( { 'atom_site' => $_[0]->{USER}{ATOM_SITE},
		      'include' => { 'label_comp_id' => $_[2] },
		      'data' => [ 'id' ],
		      'is_list' => 1 } );
        }
    | 'atoid' num_ope
        {
	    filter( { 'atom_site' => $_[0]->{USER}{ATOM_SITE},
		      'include' => { 'id' => $_[2] },
		      'data' => [ 'id' ],
		      'is_list' => 1 } );
        }
    | 'atoname' str_ope
        {
	    filter( { 'atom_site' => $_[0]->{USER}{ATOM_SITE},
		      'include' => { 'label_atom_id' => $_[2] },
		      'data' => [ 'id' ],
		      'is_list' => 1 } );
        }
    | 'atotype' str_ope
        {
	    filter( { 'atom_site' => $_[0]->{USER}{ATOM_SITE},
		      'include' => { 'type_symbol' => $_[2] },
		      'data' => [ 'id' ],
		      'is_list' => 1 } );
        }
;

num_ope
    : num_ope ',' num_ope { [ @{ $_[1] }, @{ $_[3] } ]; }
    | num_ope '-' num_ope { [ $_[1]->[0]..$_[3]->[0] ]; }
    | NUM                 { [ int( $_[1] ) ]; }
;

str_ope
    : str_ope ',' str_ope { [ @{ $_[1] }, @{ $_[3] } ]; }
    | STR                 { [ $_[1] ]; }
;

%%

sub lexer
{
    my( $parser ) = shift;

    $parser->YYData->{INPUT} || return( '',undef );
    $parser->YYData->{INPUT} =~ s/^[ \t]//;

    # Returns tokens to parser.
    for( $parser->YYData->{INPUT} ){
        if( s/^(resid)// ) {
            return ( 'resid', $1 );
	} elsif(s/^(resname)//) {
            return ( 'resname', $1 );
        } elsif(s/^(atoid)//) {
            return ( 'atoid', $1 );
        } elsif(s/^(atoname)//) {
            return ( 'atoname', $1 );
        } elsif(s/^(atotype)//) {
            return ( 'atotype', $1 );
        } elsif( s/^([0-9]+)// ) {
            return ( 'NUM', $1 );
	} elsif( s/^(\w+)// ) {
            return ( 'STR', $1 );
	} elsif( s/^(,)// ) {
            return ( ',', $1 );
	} elsif( s/^(-)// ) {
            return ( '-', $1 );
	} elsif( s/^(\|)// ) {
            return ( '|', $1 );
	} elsif( s/^(&)// ) {
            return ( '&', $1 );
	} elsif( s/^(\()// ) {
            return ( '(', $1 );
	} elsif( s/^(\))// ) {
            return ( ')', $1 );
	} elsif( s/^(\!)// ) {
            return ( '!', $1 );
	}
    }
}

sub debugger
{
    exists $_[0]->YYData->{ERRMSG}

    and do {
        print $_[0]->YYData->{ERRMSG};
        return;
    };

    print "Syntax error\n";
}

sub parser
{
    my ( $self, $input, $atom_site ) = @_;

    $self->YYData->{INPUT} = $input;
    $self->YYData->{ATOM_SITE} = $atom_site;
    my $selected_ids = $self->YYParse( yylex => \&lexer,
				       yyerror => \&debugger,
				       yydebug=>0x00 );
    my $selected_atom_site = filter( { "atom_site" => $atom_site,
				       "include" => { "id" => $selected_ids } });
    return $selected_atom_site;
}
